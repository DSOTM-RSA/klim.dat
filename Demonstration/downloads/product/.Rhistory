reac <- - R.O2*(O2/(Ks+O2))
return(list(dCdt = tran + reac))
}
# First order consumption of organic carbon (OC)
OC.model <- function (t = 0, OC, pars = NULL) {
tran <- tran.1D(C = OC, flux.up = F.OC, D = Db.grid,
v = v.grid, VF = svf.grid, dx = grid)$dC
reac <- - k*OC
return(list(dCdt = tran + reac))
}
O2.model <- function (t = 0, O2, pars = NULL) {
tran <- tran.1D(C = O2, C.up = C.ow.O2, D = D.grid,
v = v.grid, VF = por.grid, dx = grid)$dC
reac <- - R.O2*(O2/(Ks+O2))
return(list(dCdt = tran + reac))
}
# First order consumption of organic carbon (OC)
OC.model <- function (t = 0, OC, pars = NULL) {
tran <- tran.1D(C = OC, flux.up = F.OC, D = Db.grid,
v = v.grid, VF = svf.grid, dx = grid)$dC
reac <- - k*OC
return(list(dCdt = tran + reac))
}
F.OC    <- 25    # input flux organic carbon [micromol cm-2 yr-1]
C.ow.O2 <- 0.25  # concentration O2 in overlying water [micromol cm-3]
por     <- 0.8   # porosity
D       <- 400   # diffusion coefficient O2 [cm2 yr-1]
Db      <- 10    # mixing coefficient sediment [cm2 yr-1]
v       <- 0.1     # advective velocity [cm yr-1]
k       <- 1     # decay constant organic carbon [yr-1]
R.O2    <- 10    # O2 consumption rate [micromol cm-3 yr-1]
Ks      <- 0.005 # O2 consumption saturation constant
# Grid definition
L <- 10   # depth of sediment domain [cm]
N <- 1000  # number of grid layers
grid <- setup.grid.1D(x.up = 0, L = L, N = N)
# Volume fractions
por.grid <- setup.prop.1D(value = por, grid = grid)
svf.grid <- setup.prop.1D(value = (1-por), grid = grid)
D.grid   <- setup.prop.1D(value = D, grid = grid)
Db.grid  <- setup.prop.1D(value = Db, grid = grid)
v.grid   <- setup.prop.1D(value = v, grid = grid)
#====================#
# Model solution     #
#====================#
# Initial conditions + simulation O2
yini <- rep(0, length.out = N)
O2   <- steady.1D(y = yini, func = O2.model, nspec = 1)
yini <- rep(0, length.out = N)
yini <- rep(0, length.out = N)
yini <- rep(0, length.out = N)
OC   <- steady.1D(y = yini, func = OC.model, nspec = 1)
plot(O2, grid = grid$x.mid, xyswap = TRUE, main = "O2 concentration",
ylab = "depth [cm]", xlab = "", mfrow = c(1,2), type = "p", pch = 16)
plot(OC, grid = grid$x.mid, xyswap = TRUE, main = "C concentration",
ylab = "depth [cm]", xlab = "", mfrow = NULL)
temp<- rnorm(365, 5, 10)
mort<- rnorm(365, 300, 45)
poll<- rpois(365,  lambda=76)
date<-seq(as.Date('2011-01-01'),as.Date('2011-12-31'),by = 1)
df<-data.frame(date,mort,poll,temp)
library(lattice)
library(zoo)
z <- read.zoo(df)
# classic graphics in separate and single plots
plot(z)
View(df)
plot(z, screen = 1)
library(lattice)
xyplot(z)
xyplot(z, screen = 1)
View(df)
library(ggplot2)
autoplot(z) + facet_free()
library(ggplot2)
autoplot(z) + facet_free()
library(latticeExtra)
set.seed(1)
dat <- ts(matrix(cumsum(rnorm(200 * 12)), ncol = 12))
colnames(dat) <- paste("series", LETTERS[1:12])
## show simple line plot first, for reference.
xyplot(dat, scales = list(y = "same"))
infolayers <-
layer(panel.scaleArrow(x = 0.99, digits = 1, col = "grey",
srt = 90, cex = 0.7)) +
layer(lim <- current.panel.limits(),
panel.text(lim$x[1], lim$y[1], round(lim$y[1],1), font = 2,
cex = 0.7, adj = c(-0.5,-0.5), col = "#9FC8DC"))
horizonplot(dat, layout = c(1,12), colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), horizonscale = 10, colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), origin = 0, horizonscale = 10, colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), ylim = c(0, 10), colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), origin = 0,
scales = list(y = list(relation = "same")),
colorkey = TRUE, colorkey.digits = 1) +
infolayers
horizonplot(dat, horizonscale = 10, colorkey = TRUE,
layout = c(1,12), strip.left = FALSE,
ylab = list(rev(colnames(dat)), rot = 0, cex = 0.7)) +
layer_(panel.fill(col = "gray90"), panel.xblocks(..., col = "white"))
xyplot(EuStockMarkets, scales = list(y = "same"),
panel = function(x, y, ...) {
col <-
c("#B41414","#E03231","#F7A99C","#9FC8DC","#468CC8","#0165B3")
for (i in c(-3:-1, 2:0)) {
if (i >= 0)
yi <- pmax(4000, pmin(y, 4000 + 1000 * (i+1)))
if (i < 0)
yi <- pmin(4000, pmax(y, 4000 + 1000 * i))
panel.xyarea(x, yi, origin = 4000,
col = col[i+4], border = NA)
}
panel.lines(x, y)
panel.abline(h = 4000, lty = 2)
})
horizonplot(EuStockMarkets, colorkey = TRUE,
origin = 4000, horizonscale = 1000) +
infolayers
horizonplot(sunspots, cut = list(n = 23, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE, layout = c(1,23)) +
layer(grid::grid.text(round(x[1]), x = 0, just = "left"))
horizonplot(sunspots, cut = list(n = 23, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE,
layer(grid::grid.text(round(x[1]), x = 0, just = "left"))
horizonplot(sunspots, cut = list(n = 23, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, cut = list(n = 2, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, cut = list(n = 1, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots,
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots,
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, colorkey = TRUE,origin=100,
strip.left = FALSE)
set.seed(1)
foo <- list(x = 1:100, y = cumsum(rnorm(100)))
## show original data
xyplot(y + y^2 ~ x, foo, type = "l")
## construct separate plots for each series
obj1 <- xyplot(y ~ x, foo, type = "l")
obj2 <- xyplot(y^2 ~ x, foo, type = "l")
## simple case: no axis for the overlaid plot
doubleYScale(obj1, obj2, add.axis = FALSE)
## draw second y axis
doubleYScale(obj1, obj2)
## ...with second ylab
doubleYScale(obj1, obj2, add.ylab2 = TRUE)
## ...or with a key
doubleYScale(obj1, obj2, text = c("obj1", "obj2"))
## ...with custom styles
update(doubleYScale(obj1, obj2, text = c("obj1", "obj2")),
par.settings = simpleTheme(col = c('red','black'), lty = 1:2))
## different plot types
x <- rnorm(60)
doubleYScale(histogram(x), densityplot(x), use.style = FALSE)
## (but see ?as.layer for a better way to do this)
## multi-panel example
## a variant of Figure 5.13 from Sarkar (2008)
## http://lmdvr.r-forge.r-project.org/figures/figures.html?chapter=05;figure=05_13
data(SeatacWeather)
temp <- xyplot(min.temp + max.temp ~ day | month,
data = SeatacWeather, type = "l", layout = c(3, 1))
rain <- xyplot(precip ~ day | month, data = SeatacWeather, type = "h")
doubleYScale(temp, rain, style1 = 0, style2 = 3, add.ylab2 = TRUE,
text = c("min. T", "max. T", "rain"), columns = 3)
## re-plot with different styles
update(trellis.last.object(),
par.settings = simpleTheme(col = c("black", "red", "blue")))
data(EastAuClimate)
## Compare the climates of state capital cities
EastAuClimate[c("Hobart", "Melbourne", "Sydney", "Brisbane"),]
View(EastAuClimate)
lmap <-
function(database = "world", regions = ".", exact = FALSE,
boundary = TRUE, interior = TRUE, projection = "",
parameters = NULL, orientation = NULL,
aspect = "iso", type = "l",
par.settings = list(axis.line = list(col = "transparent")),
xlab = NULL, ylab = NULL, ...)
{
theMap <- map(database, regions, exact = exact,
boundary = boundary, interior = interior,
projection = projection, parameters = parameters,
orientation = orientation, plot = FALSE)
xyplot(y ~ x, theMap, type = type, aspect = aspect,
par.settings = par.settings, xlab = xlab, ylab = ylab,
default.scales = list(draw = FALSE), ...)
}
## Plot the sites on a map of Australia
if (require("maps")) {
lmap(regions = c("Australia", "Australia:Tasmania"),
exact = TRUE, projection = "rectangular",
parameters = 150, xlim = c(130, 170),
panel = function(...) {
panel.xyplot(...)
with(EastAuClimate, {
panel.points(Longitude, Latitude, pch = 16)
txt <- row.names(EastAuClimate)
i <- c(3, 4)
panel.text(Longitude[ i], Latitude[ i], txt[ i], pos = 2)
panel.text(Longitude[-i], Latitude[-i], txt[-i], pos = 4)
})
})
}
xyplot(WinterMaxTemp ~ Latitude, EastAuClimate, aspect = "xy",
type = c("p", "a"), ylab = "Temperature (degrees C)")
siteNames <- factor(row.names(EastAuClimate),
levels = row.names(EastAuClimate))
## Plot temperature ranges (as bars), color-coded by RainDays
segplot(siteNames ~ WinterMinTemp + SummerMaxTemp, EastAuClimate,
level = RainDays, sub = "Color scale: number of rainy days per year",
xlab = "Temperature (degrees C)",
main = paste("Typical temperature range and wetness",
"of coastal Australian cities", sep = "\n"))
xyplot(SummerRain + WinterRain ~ Latitude, EastAuClimate,
type = c("p", "a"), auto.key = list(lines = TRUE),
ylab = "Rainfall (mm / month)")
data(biocAccess)
xyplot(stl(ts(biocAccess$counts[1:(24 * 30)], frequency = 24), "periodic"))
xyplot(stl(log(co2), s.window=21),
main = "STL decomposition of CO2 data")
xyplot(stl(nottem, s.window = 4)) +
as.layer(xyplot(stl(nottem, s.window = "periodic")), style = 2)
xyplot(stl(nottem, s.window = 4), superpose=TRUE,
screens = list(data = "trend", trend = "trend", "residuals"),
strip.left = TRUE, layout = c(1,2))
ts.union(mdeaths, fdeaths)
data(mdeaths)
mdeaths
str(mdeaths)
fdeaths
plot(fdeaths)
plot(mdeaths)
ts.intersect(window(mdeaths, 1976), window(fdeaths, 1974, 1978))
dput(head(Dat, 10))
structure(list(open_date = structure(c(11742, 11966, 11987, 12001,
12015, 12029, 12043, 12064, 12085, 12099), class = "Date"), Dry_w = c(2.4,
14.05, 28.55, 20.76, 18.6, NA, 20.72, 18.47, 12.42, 25.57), PP_int = c(NA,
1281.52, 1352.15, 1333.05, 959.6, 738.24, 176.73, NA, 108.61,
518.42)), .Names = c("open_date", "Dry_w", "PP_int"), row.names = 166:175,
class = "data.frame")
clim.m <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")),
> mean, na.rm=TRUE)
clim.m <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")), mean, na.rm=TRUE)
Dat<-structure(list(open_date = structure(c(11742, 11966, 11987, 12001,
12015, 12029, 12043, 12064, 12085, 12099), class = "Date"), Dry_w = c(2.4,
14.05, 28.55, 20.76, 18.6, NA, 20.72, 18.47, 12.42, 25.57), PP_int = c(NA,
1281.52, 1352.15, 1333.05, 959.6, 738.24, 176.73, NA, 108.61,
518.42)), .Names = c("open_date", "Dry_w", "PP_int"), row.names = 166:175,
class = "data.frame")
clim.m <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")), mean, na.rm=TRUE)
View(clim.m)
View(Dat)
View(clim.m)
clim.sd <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")), sd,  na.rm=TRUE)
View(clim.sd)
Month <- format(Dat$open_date, "%m")
anom <- Dat$Dry_w - ave(Dat$Dry_w, Month, FUN = function(x) mean(x,
na.rm = TRUE))
st.anom <- Dat$PP_int - ave(Dat$PP_int, Month, FUN = function(x) mean(x,
na.rm = TRUE))
st.anom <- anom / ave(Dat$Dry_int, Dat$month, FUN = function(x) sd(x, na.rm = TRUE))
nom <- Dat$Dry_int - ave(Dat$Dry_int, Dat$month, FUN = function(x) mean(x, na.rm = TRUE))
st.anom <- anom / ave(Dat$Dry_int, Dat$month, FUN = function(x) sd(x, na.rm = TRUE))
View(Dat)
nom <- Dat$Dry_int - ave(Dat$Dry_int, Month, FUN = function(x) mean(x, na.rm = TRUE))
st.anom <- anom / ave(Dat$Dry_int, Month, FUN = function(x) sd(x, na.rm = TRUE))
install.packages("seas")
install.packages("archivist")
library(archivist)
exampleRepoDir <- getwd()
createLocalRepo(exampleRepoDir, default = TRUE)
library(dplyr)
data("hflights", package = "hflights")
hflights %a%
group_by(Year, Month, DayofMonth) %a%
select(Year:DayofMonth, ArrDelay, DepDelay) %a%
summarise(
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
) %a%
filter(arr > 30 | dep > 30) -> example1
library(Lahman)
Batting %a%
group_by(playerID) %a%
summarise(total = sum(G)) %a%
arrange(desc(total)) %a%
head(5) %a%
asave( repoDir = exampleRepoDir )
setLocalRepo( exampleRepoDir )
data("hflights", package = "hflights")
hflights %a%
group_by(Year, Month, DayofMonth) %a%
select(Year:DayofMonth, ArrDelay, DepDelay) %a%
summarise(
arr = mean(ArrDelay, na.rm = TRUE),
dep = mean(DepDelay, na.rm = TRUE)
) %a%
filter(arr > 30 | dep > 30) %a% asave()
library(ggplot2)
diamonds %a%
group_by(cut, clarity, color) %a%
summarize(
meancarat = mean(carat, na.rm = TRUE),
ndiamonds = length(carat)
) %a%
head( 10) %a%
asave(userTags = c("tags", "operations on diamonds"))
hash2 <- searchInLocalRepo( pattern = "operations on diamonds" )
hash2
ahistory(hash2, format = "kable")
aread(md5hash = hash2)
aread(md5hash = hash2[1])
aread(md5hash = hash2[2])
aread(md5hash = hash2[3])
aread(md5hash = hash2[4])
aread(md5hash = hash2[5])
aread(md5hash = hash2)
aread(md5hash = 860466a792815080957a34021d04c5c6)
aread(md5hash = "860466a792815080957a34021d04c5c6")
aread(md5hash = "926dab1fe6e71b197a17909fcd0e5995") -> raw.dat
View(raw.dat)
ahistory(example1)
createEmptyRepo("Form", default = TRUE)
createLocalRepo("Form", default = TRUE)
invisible(aoptions("silent",TRUE))
data(iris)
iris %a% dplyr::filter(Sepal.Length < 16) %a% lm(Petal.Length ~Species, data = .,) %a% summary() -> obj
ahistory(obj)
aread("ff575c261c949d073b2895b05d1097c3")
load("/Users/danny/Research/gallery/d19fbf045d0a5aebc141d42959644b45.rda")
install.packages("archivist.github")
cat(aread("MarcinKosinski/archivist.github/eRum2016/010e596"))
library(archivist.github)
authoriseGitHub(b3adb2a6555505989161,ea50a45a3f2ba146b2560927643adaf4390fb751)
authoriseGitHub("b3adb2a6555505989161","ea50a45a3f2ba146b2560927643adaf4390fb751")
lapply()
setwd("~/Research/klim.dat/Demonstration/downloads/product")
files <- dir(pattern = '*.txt', full.names = TRUE)
output <- lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>% lapply(., function(x) x[complete.cases(x),]) %>%
lapply(.,"[",1:6)
library(dplyr)
library(tidyr)
library(lattice)
output <- lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>% lapply(., function(x) x[complete.cases(x),]) %>%
lapply(.,"[",1:6)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>% lapply(., function(x) x[complete.cases(x),]) %>%
lapply(.,"[",1:6)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>% lapply(., function(x) x[complete.cases(x),]) %>%
lapply(.,"[",1:6) %>% dplyr::bind_rows(.)
View(output)
View(output)
files
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% rename(.,MESS_DATUM_BEGINN=date.start)
View(output)
View(output)
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),]
View(output)
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% rename(.,MESS_DATUM_BEGINN=date.start) -> output
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% rename(MESS_DATUM_BEGINN=date.start) -> output
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% rename(MESS_DATUM_BEGINN=date.start) -> output.two
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% rename(.,MESS_DATUM_BEGINN=date.start) -> output.two
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %T% rename(.,MESS_DATUM_BEGINN=date.start) -> output.two
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %T>% rename(.,MESS_DATUM_BEGINN=date.start) -> output.two
library(magrittr)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %T>% rename(.,MESS_DATUM_BEGINN=date.start) -> output.two
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('1','2','3'))
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),]
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip')) %T>%
as.Date(.$date.start, format='%Y%m%d')
View(output)
str(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip')) %>%
as.Date(.$date.start, format='%Y%m%d')
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip')) %$%
as.Date(.$date.start, format='%Y%m%d')
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip')) %$%
as.Date(date.start, format='%Y%m%d')
View(output)
str(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
View(output)
output %<>% as.Date(.$date.start, format='%Y%m%d')
output %<>% .$date.start(as.Date, format='%Y%m%d')
?as.Date
str(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip')) %>% as.character(.$date.start)
str(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip')) %>% as.character(.,date.start)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
View(output)
output %<>% as.character(.$date.start, format='%Y%m%d')
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
output %<>% as.character(date.start, format='%Y%m%d')
output %<>% as.character(.$date.start, format='%Y%m%d')
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
View(output)
changed <-output %>%  as.character(.$date.start, format='%Y%m%d')
changed <-output$date.start %>%  as.character( format='%Y%m%d')
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
changed <-output$date.start %>%  as.character( format='%Y%m%d')
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
output$date.start <-as.character(output$date.start) %>% as.Date(., format='%Y%m%d')
View(output)
output$date.start <-as.character(output$date.start) %>% as.Date(., format='%Y%m%d')
output$date.end <-as.character(output$date.end) %>% as.Date(., format='%Y%m%d')
output$station.id <- as.factor(output$station.id)
View(output)
output <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
output$date.start <-as.character(output$date.start) %>% as.Date(., format='%Y%m%d')
View(output)
output$date.end <-as.character(output$date.end) %>% as.Date(., format='%Y%m%d')
output$station.id <- as.factor(output$station.id)
View(output)
output$precip[output$precip==-999] <- NA
output.ts <- as.ts(output)
View(output)
str(output)
files <- dir(pattern = '*.txt', full.names = TRUE)
pro.df <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
# Conversion to TS
pro.df$date.start <-as.character(pro.df$date.start) %>% as.Date(., format='%Y%m%d')
pro.df$date.end <-as.character(pro.df$date.end) %>% as.Date(., format='%Y%m%d')
pro.df$station.id <- as.factor(pro.df$station.id)
pro.df$precip[pro.df$precip==-999] <- NA
pro.df.ts <- as.ts(pro.df)
?bind_rows
install.packages(c("bookdown", "h2o", "miniCRAN", "oce", "rmarkdown"))
