<<<<<<< HEAD
ncol = table(df_count$drug_class)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("BrBG","OrRd","YlGn","Set2"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("OrRd","OrRd","OrRd","OrRd"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("BrBG","BrBG","BrBG","BrBG"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("BrBG","OrRd","YlGn","Set2"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal[[2]] = pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal = unname(unlist(pal))
pal
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
lum = seq(100, 50, length.out=4)    # Vary the luminance for each bar
shift = seq(20, 60, length.out=4)  # Shift the hues for each bar
pal2 = mapply(function(n, l, s) hcl(seq(0 + s, 360 + s, length.out=n+1)[1:n], 100, l),
ncol, lum, shift)
pal2 = unname(unlist(pal2))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2) +
guides(fill=FALSE)
pal2
order(df_count,drug_class)
pal2-c
sort(df_count,drug_name)
sort(df_count)
sort(df_count$drug_class)
order(df_count,drug_class)
order(df_count,df$count$drug_class)
order(df_count$drug_class)
df_count[order(df_count$drug_class)]
df_count[order(df_count$drug_class),]
outerr<-df_count[order(df_count$drug_class),]
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2) +
guides(fill=FALSE)
outerr
View(outerr)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(pal2) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2[order(df_count$drug_class)]) +
guides(fill=FALSE)
pal = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal = unname(unlist(pal))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal2[order(df_count$drug_class)]) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(df_count$drug_class)]) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(df_count$drug_class)]) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(outerr$drug_class)]) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal[order(outerr$drug_class)]) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal) +
guides(fill=FALSE)
?scale_fill_manual
pal3<-pal[order(df_count$drug_class),]
pal3<-pal2[order(df_count$drug_class),]
df_count$other<-df_count$drug_name[order(df_count$drug_class),]
df_count$other<-df_count$[order(df_count$drug_class),]
other<-df_count$[order(df_count$drug_class),]
outerr<-df_count[order(df_count$drug_class),]
View(outerr)
outer<-pal2[order(df_count$drug_class),]
df_count$other<-pal2
outerr$other<-pal2
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
pal3 = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal3 = unname(unlist(pal3))
pal3
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
pal3
pal2
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
pal.trial = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.trial[[2]] = pal.trial[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal.trial = unname(unlist(pal.trial))
pal.trial
df_count$colours<-pal.trial
View(df_count)
sorted<-pal.trial[order(df_count$drug_class),]
outerr$new<-pal.trial
ggplot(data = df_class, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = df_class, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$new)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=c(outerr$other)) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=pal.trial) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=colours) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=cum.freq) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=drug_name) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
outerr$othername <- outerr$drug_name
outerr$othername <- df_count$drug_name
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$other) +
guides(fill=FALSE)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
outerr.again<-df_count[order(df_count$drug_class),]
View(outerr.again)
pal.test = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.test[[2]] = pal.test[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
pal.test = unname(unlist(pal.test))
df_count_sorted <- df_count[order(df_count$drug_class),]
df_count_sorted$labOrder <- df_count$drug_name
df_count$colours<-pal.test
View(df_count_sorted)
ggplot(data = outerr, aes(x=drug_class, y=freq, fill=othername) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=outerr$new) +
guides(fill=FALSE)
df_count_sorted$new<-pal.trial
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=$df_count_sorted$new) +
guides(fill=FALSE))
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=df_count_sorted$labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
ggplot(data = df_count_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$new) +
guides(fill=FALSE)
pal.test = mapply(function(x,y) brewer.pal(x,y), ncol, c("Set2","Set2","Set2","Set2"))
pal.test[[2]] = pal.test[[2]][1:2]
pal.test = unname(unlist(pal.test))
pal.test
df_sorted <- df_count[order(df_count$drug_class),]
View(df_sorted)
df_sorted$labOrder <- df_count$drug_name
df_sorted$colours<-pal.test
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_count_sorted$colours) +
guides(fill=FALSE)
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq), colour="grey20") +
scale_fill_manual(values=df_sorted$colours) +
guides(fill=FALSE)
repeating.pal = mapply(function(x,y) brewer.pal(x,y), ncol,        c("Set2","Set2","Set2","Set2"))
Alter the plot routine, with `fill` = labOrder.
repeating.pal[[2]] = repeating.pal[[2]][1:2]  # We only need 2 colors but brewer.pal creates 3 minimum
repeating.pal = unname(unlist(repeating.pal))
df_count_sorted <- df_count[order(df_count$drug_class),]
df_count_sorted$labOrder <- df_count$drug_name
df_count$colours<-repeating.pal
ggplot(data = df_sorted, aes(x=drug_class, y=freq, fill=labOrder) ) +
geom_bar(stat="identity", colour="black", lwd=0.2) +
geom_text(aes(label=paste0(drug_name,": ", freq), y=cum.freq),     colour="grey20") +
scale_fill_manual(values=df_sorted$colours) +
guides(fill=FALSE)
install.packages(c("htmltools", "shinyjs"))
install.packages(c("BiodiversityR", "car", "effects", "Rcpp", "readxl", "shiny", "shinyjs", "sjPlot"))
setwd("~/Documents/GitArchive/Studio/Shiny Apps/shine2")
shiny::runApp()
install.packages(c("Hmisc", "lubridate", "Rcmdr", "RcmdrMisc", "sjmisc"))
install.packages("ReacTran")
period_onset <- as.Date(c("2014-07-02", "2014-08-02", "2014-08-29", "2014-09-25",
"2014-10-24", "2014-11-20", "2014-12-22", "2015-01-19"))
days_between_periods <- as.numeric(diff(period_onset))
calc_log_like <- function(days_since_last_period, days_between_periods,
mean_period, sd_period, next_period,
is_fertile, is_pregnant) {
n_non_pregnant_periods <- length(days_between_periods)
log_like <- 0
if(n_non_pregnant_periods > 0) {
log_like <- log_like + sum( dnorm(days_between_periods, mean_period, sd_period, log = TRUE) )
}
log_like <- log_like + log( (1 - 0.19 * is_fertile)^n_non_pregnant_periods )
if(!is_pregnant && next_period < days_since_last_period) {
log_like <- -Inf
}
log_like
}
prop_not_preg_12_cycles <- c( "19-26 years" = 0.08,
"27-34 years" = 0.13,
"35-39 years" = 0.18)
1 - (prop_not_preg_12_cycles - 0.05)^(1/12)
sample_from_prior <- function(n) {
prior <- data.frame(mean_period = rnorm(n, 27.7, 2.4),
sd_period   = abs(rnorm(n, 0, 2.05)),
is_fertile  = rbinom(n, 1, 0.95))
prior$is_pregnant <- rbinom(n, 1, 0.19 * prior$is_fertile)
prior$next_period <- rnorm(n, prior$mean_period, prior$sd_period)
prior$next_period[prior$is_pregnant == 1] <- NA
prior
}
sample_from_prior(n = 4)
sample_from_prior(5)
sample_from_posterior <- function(days_since_last_period, days_between_periods, n_samples) {
prior <- sample_from_prior(n_samples)
log_like <- sapply(1:n_samples, function(i) {
calc_log_like(days_since_last_period, days_between_periods,
prior$mean_period[i], prior$sd_period[i], prior$next_period[i],
prior$is_fertile[i], prior$is_pregnant[i])
})
posterior <- prior[ sample(n_samples, replace = TRUE, prob = exp(log_like)), ]
posterior
}
# THE RESULTS
post <- sample_from_posterior(33, days_between_periods, n_samples = 100)
head(post)
mean(post$is_fertile)
mean(post$is_pregnant)
post <- sample_from_posterior(34, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
post <- sample_from_posterior(35, days_between_periods, n_samples = 100000)
mean(post$is_pregnant)
library(dplyr)
library(tidyr)
library(lattice)
setwd("~/Documents/GitArchive/klim.dat/Demonstration/downloads/product")
files <- dir(pattern = '*.txt', full.names = TRUE)
tables.of.data <- lapply(files, read.table,sep=";",header=TRUE,fill=TRUE)
# correcting for false factors in data
fix.factors <-function(df) {
df[complete.cases(df),]
}
tables.of.data.trimmed<-lapply(tables.of.data,fix.factors)
# subset columns of interest
tables.subset<-lapply(tables.of.data.trimmed,"[",1:6)
# remove un-needed datafiles
rm(tables.of.data.trimmed); rm(tables.of.data)
# test plot
plot(tables.subset[[1]]$NIEDERSCHLAGSHOEHE,type="l")
# OR convert to BIG df
data.df<-dplyr::bind_rows(tables.subset)
# deal with FALSE factors
data.df.FF<-data.df[complete.cases(data.df),] # remove NA's (false factors and missing data)
# Various Cleaning
data.df.FF$date.start <-as.character(data.df.FF$MESS_DATUM_BEGINN) %>% as.Date(., format='%Y%m%d')
data.df.FF$date.end <-as.character(data.df.FF$MESS_DATUM_ENDE) %>% as.Date(., format='%Y%m%d')
data.df.FF$station.id <- as.factor(data.df.FF$STATIONS_ID)
data.df.FF$precip <- data.df.FF$NIEDERSCHLAGSHOEHE
dt <- data.df.FF %>% select(date.start:precip)
dt$precip[dt$precip==-999] <- NA
dt.ts <- as.ts(dt)
# remove un-needed datafiles
rm(data.df); rm(data.df.FF);
#########################
# Quick Look at Data
#--->>> merging id data
new<-read.table("stat.csv",header=TRUE, sep =",")
setwd("~/Documents/GitArchive/klim.dat/Demonstration/downloads")
new<-read.table("stat.csv",header=TRUE, sep =",")
setwd("~/Documents/GitArchive/klim.dat/Demonstration/downloads")
setwd("~/Documents/GitArchive/klim.dat/Demonstration/downloads")
setwd("~/Documents/GitArchive/klim.dat/Demonstration")
new<-read.table("stat.csv",header=TRUE, sep =",")
dat = as.data.table(dt.arranged)
library(data.table)
dat = as.data.table(dt.arranged)
dat2 = as.data.table(new)
View(dt)
View(new)
dt$stat_id <- dt$station.id
dat = as.data.table(dt)
dat2 = as.data.table(new)
dat2$station.id <-dat2$stat_id
newdt<-merge(dat, dat2, by="station.id")
View(newdt)
grouped <- group_by(new,locale)
View(grouped)
new<-read.table("stat.csv",header=TRUE, sep =",")
library(data.table)
dat = as.data.table(dt)
dat2 = as.data.table(new)
dat2$station.id <-dat2$stat_id
newdt<-merge(dat, dat2, by="station.id")
View(newdt)
View(dat2)
View(dat2)
labels.for.join <- dat2[,3:8]
labels.for.join <- dat2[3:8,]
View(labels.for.join)
dat2 = as.data.table(new)
dat2$station.id <-dat2$stat_id
labels.for.join <- select(dat2,lat:station.id)
merged.df<-merge(dat, labels.for.join, by="station.id")
View(merged.df)
View(dat)
View(dt)
df.join <- select(dt,date.start:precip)
dat = as.data.table(df.join)
dat2 = as.data.table(new)
dat2$station.id <-dat2$stat_id
labels.join <- select(dat2,lat:station.id)
merged.df<-merge(dat,labels.join, by="station.id")
View(merged.df)
View(new)
merged.df <- merged.df %>% select(.,-date_start,-date_end)
View(merged.df)
group.locale.time <- merged.df %>% group_by(.,locale)
str(group.locale.time)
View(labels.join)
plot(labels.join$lon,labels.join$lat)
View(new)
object<-list(x=labels.join$lon,y=labels.join$lat,z=new$height)
object$z[1]<-0
temp2<- seq(6,15,,45)
temp3<- seq(0,600,,100)
make.surface.grid( list( temp2,temp3))-> loc2
library(fields)
one.location <-filter(merged.df, locale == Aach)
one.location <-filter(merged.df, locale == "Aach")
View(one.location)
plot(one.location$date.start,one.location$precip)
plot(one.location$date.start,one.location$precip,type="l")
plot(one.location$date[1:120].start,one.location$precip[1:120],type="l")
plot(one.location$date[,1:120].start,one.location$precip[,1:120],type="l")
one.location$precip[1:10]
one.location$precip[1:24]
group.start.month <- merged.df %>% group_by(.,date.start)
cycle <- summarise(group.start.month, mean = mean(precip,na.rm=TRUE))
View(cycle)
library(ggplot2)
ggplot(cycle) + geom_point() + geom_smooth()
ggplot(cycle) + geom_smooth()
ggplot(cycle) + geom_curve(start.date,mean) + geom_smooth()
ggplot(cycle,aes(start.date,mean)) + geom_smooth()
View(cycle)
ggplot(cycle,aes(date.start,mean)) + geom_smooth()
View(cycle)
ggplot(cycle,aes(date.start,mean)) + geom_point(aes(size=mean)) + geom_smooth()
View(cycle)
grp.dat.loc. <- merged.df %>% group_by(.,date.start,locale)
dat.loc.cycle <- summarise(grp.dat.loc., mean = mean(precip,na.rm=TRUE))
View(dat.loc.cycle)
grp.dat.loc. <- merged.df %>% group_by(.,locale)
dat.loc.cycle <- summarise(grp.dat.loc., mean = mean(precip,na.rm=TRUE))
View(dat.loc.cycle)
grp.loc <- merged.df %>% group_by(.,locale)
loc.cycle <- summarise(grp.loc, mean = mean(precip,na.rm=TRUE))
View(loc.cycle)
plot(loc.cycle$mean)
plot(loc.cycle$mean,type="s")
loc.cycle <- summarise(grp.loc, mean = mean(precip,na.rm=TRUE)) %>% arrange(.,mean)
View(loc.cycle)
plot(loc.cycle$mean,type="s")
View(grouped)
str(merged.df)
View(loc.cycle)
loc.cycle <- summarise(grp.loc, mean = mean(precip)) %>% arrange(.,mean)
View(loc.cycle)
loc.cycle <- summarise(grp.loc, mean = mean(precip,na.rm=TRUE)) %>% arrange(.,mean)
View(loc.cycle)
View(labels.join)
summary(labels.join)
unique(labels.join$locale)
unique(labels.join$station.id)
grp.loc <- merged.df %>% group_by(.,locale)
str(grp.loc)
summary(grp.loc)
View(loc.cycle)
=======
library(ReacTran)
# this example uses only the volume fractions
# in the reactive transport term
#====================#
# Model formulation  #
#====================#
# Monod consumption of oxygen (O2)
O2.model <- function (t = 0, O2, pars = NULL) {
tran <- tran.1D(C = O2, C.up = C.ow.O2, D = D.grid,
v = v.grid, VF = por.grid, dx = grid)$dC
reac <- - R.O2*(O2/(Ks+O2))
return(list(dCdt = tran + reac))
}
# First order consumption of organic carbon (OC)
OC.model <- function (t = 0, OC, pars = NULL) {
tran <- tran.1D(C = OC, flux.up = F.OC, D = Db.grid,
v = v.grid, VF = svf.grid, dx = grid)$dC
reac <- - k*OC
return(list(dCdt = tran + reac))
}
O2.model <- function (t = 0, O2, pars = NULL) {
tran <- tran.1D(C = O2, C.up = C.ow.O2, D = D.grid,
v = v.grid, VF = por.grid, dx = grid)$dC
reac <- - R.O2*(O2/(Ks+O2))
return(list(dCdt = tran + reac))
}
# First order consumption of organic carbon (OC)
OC.model <- function (t = 0, OC, pars = NULL) {
tran <- tran.1D(C = OC, flux.up = F.OC, D = Db.grid,
v = v.grid, VF = svf.grid, dx = grid)$dC
reac <- - k*OC
return(list(dCdt = tran + reac))
}
F.OC    <- 25    # input flux organic carbon [micromol cm-2 yr-1]
C.ow.O2 <- 0.25  # concentration O2 in overlying water [micromol cm-3]
por     <- 0.8   # porosity
D       <- 400   # diffusion coefficient O2 [cm2 yr-1]
Db      <- 10    # mixing coefficient sediment [cm2 yr-1]
v       <- 0.1     # advective velocity [cm yr-1]
k       <- 1     # decay constant organic carbon [yr-1]
R.O2    <- 10    # O2 consumption rate [micromol cm-3 yr-1]
Ks      <- 0.005 # O2 consumption saturation constant
# Grid definition
L <- 10   # depth of sediment domain [cm]
N <- 1000  # number of grid layers
grid <- setup.grid.1D(x.up = 0, L = L, N = N)
# Volume fractions
por.grid <- setup.prop.1D(value = por, grid = grid)
svf.grid <- setup.prop.1D(value = (1-por), grid = grid)
D.grid   <- setup.prop.1D(value = D, grid = grid)
Db.grid  <- setup.prop.1D(value = Db, grid = grid)
v.grid   <- setup.prop.1D(value = v, grid = grid)
#====================#
# Model solution     #
#====================#
# Initial conditions + simulation O2
yini <- rep(0, length.out = N)
O2   <- steady.1D(y = yini, func = O2.model, nspec = 1)
yini <- rep(0, length.out = N)
yini <- rep(0, length.out = N)
yini <- rep(0, length.out = N)
OC   <- steady.1D(y = yini, func = OC.model, nspec = 1)
plot(O2, grid = grid$x.mid, xyswap = TRUE, main = "O2 concentration",
ylab = "depth [cm]", xlab = "", mfrow = c(1,2), type = "p", pch = 16)
plot(OC, grid = grid$x.mid, xyswap = TRUE, main = "C concentration",
ylab = "depth [cm]", xlab = "", mfrow = NULL)
temp<- rnorm(365, 5, 10)
mort<- rnorm(365, 300, 45)
poll<- rpois(365,  lambda=76)
date<-seq(as.Date('2011-01-01'),as.Date('2011-12-31'),by = 1)
df<-data.frame(date,mort,poll,temp)
library(lattice)
library(zoo)
z <- read.zoo(df)
# classic graphics in separate and single plots
plot(z)
View(df)
plot(z, screen = 1)
library(lattice)
xyplot(z)
xyplot(z, screen = 1)
View(df)
library(ggplot2)
autoplot(z) + facet_free()
library(ggplot2)
autoplot(z) + facet_free()
library(latticeExtra)
set.seed(1)
dat <- ts(matrix(cumsum(rnorm(200 * 12)), ncol = 12))
colnames(dat) <- paste("series", LETTERS[1:12])
## show simple line plot first, for reference.
xyplot(dat, scales = list(y = "same"))
infolayers <-
layer(panel.scaleArrow(x = 0.99, digits = 1, col = "grey",
srt = 90, cex = 0.7)) +
layer(lim <- current.panel.limits(),
panel.text(lim$x[1], lim$y[1], round(lim$y[1],1), font = 2,
cex = 0.7, adj = c(-0.5,-0.5), col = "#9FC8DC"))
horizonplot(dat, layout = c(1,12), colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), horizonscale = 10, colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), origin = 0, horizonscale = 10, colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), ylim = c(0, 10), colorkey = TRUE) +
infolayers
horizonplot(dat, layout = c(1,12), origin = 0,
scales = list(y = list(relation = "same")),
colorkey = TRUE, colorkey.digits = 1) +
infolayers
horizonplot(dat, horizonscale = 10, colorkey = TRUE,
layout = c(1,12), strip.left = FALSE,
ylab = list(rev(colnames(dat)), rot = 0, cex = 0.7)) +
layer_(panel.fill(col = "gray90"), panel.xblocks(..., col = "white"))
xyplot(EuStockMarkets, scales = list(y = "same"),
panel = function(x, y, ...) {
col <-
c("#B41414","#E03231","#F7A99C","#9FC8DC","#468CC8","#0165B3")
for (i in c(-3:-1, 2:0)) {
if (i >= 0)
yi <- pmax(4000, pmin(y, 4000 + 1000 * (i+1)))
if (i < 0)
yi <- pmin(4000, pmax(y, 4000 + 1000 * i))
panel.xyarea(x, yi, origin = 4000,
col = col[i+4], border = NA)
}
panel.lines(x, y)
panel.abline(h = 4000, lty = 2)
})
horizonplot(EuStockMarkets, colorkey = TRUE,
origin = 4000, horizonscale = 1000) +
infolayers
horizonplot(sunspots, cut = list(n = 23, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE, layout = c(1,23)) +
layer(grid::grid.text(round(x[1]), x = 0, just = "left"))
horizonplot(sunspots, cut = list(n = 23, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE,
layer(grid::grid.text(round(x[1]), x = 0, just = "left"))
horizonplot(sunspots, cut = list(n = 23, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, cut = list(n = 2, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, cut = list(n = 1, overlap = 0),
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots,
scales = list(draw = FALSE, y = list(relation = "same")),
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots,
origin = 100, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, colorkey = TRUE,
strip.left = FALSE)
horizonplot(sunspots, colorkey = TRUE,origin=100,
strip.left = FALSE)
set.seed(1)
foo <- list(x = 1:100, y = cumsum(rnorm(100)))
## show original data
xyplot(y + y^2 ~ x, foo, type = "l")
## construct separate plots for each series
obj1 <- xyplot(y ~ x, foo, type = "l")
obj2 <- xyplot(y^2 ~ x, foo, type = "l")
## simple case: no axis for the overlaid plot
doubleYScale(obj1, obj2, add.axis = FALSE)
## draw second y axis
doubleYScale(obj1, obj2)
## ...with second ylab
doubleYScale(obj1, obj2, add.ylab2 = TRUE)
## ...or with a key
doubleYScale(obj1, obj2, text = c("obj1", "obj2"))
## ...with custom styles
update(doubleYScale(obj1, obj2, text = c("obj1", "obj2")),
par.settings = simpleTheme(col = c('red','black'), lty = 1:2))
## different plot types
x <- rnorm(60)
doubleYScale(histogram(x), densityplot(x), use.style = FALSE)
## (but see ?as.layer for a better way to do this)
## multi-panel example
## a variant of Figure 5.13 from Sarkar (2008)
## http://lmdvr.r-forge.r-project.org/figures/figures.html?chapter=05;figure=05_13
data(SeatacWeather)
temp <- xyplot(min.temp + max.temp ~ day | month,
data = SeatacWeather, type = "l", layout = c(3, 1))
rain <- xyplot(precip ~ day | month, data = SeatacWeather, type = "h")
doubleYScale(temp, rain, style1 = 0, style2 = 3, add.ylab2 = TRUE,
text = c("min. T", "max. T", "rain"), columns = 3)
## re-plot with different styles
update(trellis.last.object(),
par.settings = simpleTheme(col = c("black", "red", "blue")))
data(EastAuClimate)
## Compare the climates of state capital cities
EastAuClimate[c("Hobart", "Melbourne", "Sydney", "Brisbane"),]
View(EastAuClimate)
lmap <-
function(database = "world", regions = ".", exact = FALSE,
boundary = TRUE, interior = TRUE, projection = "",
parameters = NULL, orientation = NULL,
aspect = "iso", type = "l",
par.settings = list(axis.line = list(col = "transparent")),
xlab = NULL, ylab = NULL, ...)
{
theMap <- map(database, regions, exact = exact,
boundary = boundary, interior = interior,
projection = projection, parameters = parameters,
orientation = orientation, plot = FALSE)
xyplot(y ~ x, theMap, type = type, aspect = aspect,
par.settings = par.settings, xlab = xlab, ylab = ylab,
default.scales = list(draw = FALSE), ...)
}
## Plot the sites on a map of Australia
if (require("maps")) {
lmap(regions = c("Australia", "Australia:Tasmania"),
exact = TRUE, projection = "rectangular",
parameters = 150, xlim = c(130, 170),
panel = function(...) {
panel.xyplot(...)
with(EastAuClimate, {
panel.points(Longitude, Latitude, pch = 16)
txt <- row.names(EastAuClimate)
i <- c(3, 4)
panel.text(Longitude[ i], Latitude[ i], txt[ i], pos = 2)
panel.text(Longitude[-i], Latitude[-i], txt[-i], pos = 4)
})
})
}
xyplot(WinterMaxTemp ~ Latitude, EastAuClimate, aspect = "xy",
type = c("p", "a"), ylab = "Temperature (degrees C)")
siteNames <- factor(row.names(EastAuClimate),
levels = row.names(EastAuClimate))
## Plot temperature ranges (as bars), color-coded by RainDays
segplot(siteNames ~ WinterMinTemp + SummerMaxTemp, EastAuClimate,
level = RainDays, sub = "Color scale: number of rainy days per year",
xlab = "Temperature (degrees C)",
main = paste("Typical temperature range and wetness",
"of coastal Australian cities", sep = "\n"))
xyplot(SummerRain + WinterRain ~ Latitude, EastAuClimate,
type = c("p", "a"), auto.key = list(lines = TRUE),
ylab = "Rainfall (mm / month)")
data(biocAccess)
xyplot(stl(ts(biocAccess$counts[1:(24 * 30)], frequency = 24), "periodic"))
xyplot(stl(log(co2), s.window=21),
main = "STL decomposition of CO2 data")
xyplot(stl(nottem, s.window = 4)) +
as.layer(xyplot(stl(nottem, s.window = "periodic")), style = 2)
xyplot(stl(nottem, s.window = 4), superpose=TRUE,
screens = list(data = "trend", trend = "trend", "residuals"),
strip.left = TRUE, layout = c(1,2))
ts.union(mdeaths, fdeaths)
data(mdeaths)
mdeaths
str(mdeaths)
fdeaths
plot(fdeaths)
plot(mdeaths)
ts.intersect(window(mdeaths, 1976), window(fdeaths, 1974, 1978))
dput(head(Dat, 10))
structure(list(open_date = structure(c(11742, 11966, 11987, 12001,
12015, 12029, 12043, 12064, 12085, 12099), class = "Date"), Dry_w = c(2.4,
14.05, 28.55, 20.76, 18.6, NA, 20.72, 18.47, 12.42, 25.57), PP_int = c(NA,
1281.52, 1352.15, 1333.05, 959.6, 738.24, 176.73, NA, 108.61,
518.42)), .Names = c("open_date", "Dry_w", "PP_int"), row.names = 166:175,
class = "data.frame")
clim.m <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")),
> mean, na.rm=TRUE)
clim.m <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")), mean, na.rm=TRUE)
Dat<-structure(list(open_date = structure(c(11742, 11966, 11987, 12001,
12015, 12029, 12043, 12064, 12085, 12099), class = "Date"), Dry_w = c(2.4,
14.05, 28.55, 20.76, 18.6, NA, 20.72, 18.47, 12.42, 25.57), PP_int = c(NA,
1281.52, 1352.15, 1333.05, 959.6, 738.24, 176.73, NA, 108.61,
518.42)), .Names = c("open_date", "Dry_w", "PP_int"), row.names = 166:175,
class = "data.frame")
clim.m <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")), mean, na.rm=TRUE)
View(clim.m)
View(Dat)
View(clim.m)
clim.sd <- aggregate(Dat, by=list(Month=format(Dat$open_date, "%m")), sd,  na.rm=TRUE)
View(clim.sd)
Month <- format(Dat$open_date, "%m")
anom <- Dat$Dry_w - ave(Dat$Dry_w, Month, FUN = function(x) mean(x,
na.rm = TRUE))
st.anom <- Dat$PP_int - ave(Dat$PP_int, Month, FUN = function(x) mean(x,
na.rm = TRUE))
st.anom <- anom / ave(Dat$Dry_int, Dat$month, FUN = function(x) sd(x, na.rm = TRUE))
nom <- Dat$Dry_int - ave(Dat$Dry_int, Dat$month, FUN = function(x) mean(x, na.rm = TRUE))
st.anom <- anom / ave(Dat$Dry_int, Dat$month, FUN = function(x) sd(x, na.rm = TRUE))
View(Dat)
nom <- Dat$Dry_int - ave(Dat$Dry_int, Month, FUN = function(x) mean(x, na.rm = TRUE))
st.anom <- anom / ave(Dat$Dry_int, Month, FUN = function(x) sd(x, na.rm = TRUE))
install.packages("seas")
setwd("~/Research/Studio/proper")
props<-c(0.01,0.03,0.05,0.07,0.09,0.11,0.13,0.15,0.17,0.19)
sum(props)
props2<-c(22+24+26+28)
sum(props2)
counts<-c(100,200,300,400,500,1000,1500,2500,3000)
base.assemblage<-outer(props,counts)
base.assemblage
sum(base.assemblage[,9])
#' ### Computation
#' An empty matrix is created to hold the output of the loop output.
#' The confidence inteval is calcualted for each base assemblage (columns).
#' A print commmand aids diagnostics of the function.
#+ compute-bounds, include = TRUE
lower.intervals<-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
lower.detection <-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
upper.intervals<-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
upper.detection <-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
arr <- array(0,c(9,10,4))
i=1
for (i in i:9) {
bounds<- betLB(base.assemblage[,i],counts[i])
lower.intervals[,i]<-round(bounds,3)
bounds.up<- betUB(base.assemblage[,i],counts[i])
upper.intervals[,i]<-round(bounds.up,3)
prevalence <-round(bounds*counts[i]/100,0)
lower.detection[,i] <- prevalence
prevalence.up <-round(bounds.up*counts[i]/100,0)
upper.detection[,i] <- prevalence.up
results <-list(lower.intervals,lower.detection,upper.intervals,upper.detection)
arr <-as.array(results)
}
# naming
source("howarthCI.R")
s
s
s
s
s
s
s
s
s
s
props<-c(0.01,0.03,0.05,0.07,0.09,0.11,0.13,0.15,0.17,0.19)
sum(props)
props2<-c(22+24+26+28)
sum(props2)
counts<-c(100,200,300,400,500,1000,1500,2500,3000)
base.assemblage<-outer(props,counts)
base.assemblage
sum(base.assemblage[,9])
#' ### Computation
#' An empty matrix is created to hold the output of the loop output.
#' The confidence inteval is calcualted for each base assemblage (columns).
#' A print commmand aids diagnostics of the function.
#+ compute-bounds, include = TRUE
lower.intervals<-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
lower.detection <-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
upper.intervals<-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
upper.detection <-matrix(ncol=ncol(base.assemblage),nrow=nrow(base.assemblage))
arr <- array(0,c(9,10,4))
i=1
for (i in i:9) {
bounds<- betLB(base.assemblage[,i],counts[i])
lower.intervals[,i]<-round(bounds,3)
bounds.up<- betUB(base.assemblage[,i],counts[i])
upper.intervals[,i]<-round(bounds.up,3)
prevalence <-round(bounds*counts[i]/100,0)
lower.detection[,i] <- prevalence
prevalence.up <-round(bounds.up*counts[i]/100,0)
upper.detection[,i] <- prevalence.up
results <-list(lower.intervals,lower.detection,upper.intervals,upper.detection)
arr <-as.array(results)
}
# naming
colnames(lower.intervals)<-as.character(counts); colnames(upper.intervals)<-as.character(counts)
rownames(lower.intervals)<-as.character(props); rownames(upper.intervals)<-as.character(props)
arr[[3]]-arr[[1]]
#' ### Plotting
#' An empty matrix is created to hold the output of the loop output.
#' The confidence inteval is calcualted for each base assemblage (columns).
#' A print commmand aids diagnostics of the function.
#+ plot, include = TRUE
par(mfrow=c(2,2))
persp(base.assemblage,main = "Assemblage matrix (n)")
persp(arr[[1]], main = "Assembalge Lower Bounds")
persp(arr[[2]], main = "Assemblage Lower Expected Counts")
par(mfrow=c(1,1))
# interpolate the surface
library(fields)
w2 <- arr[[3]]-arr[[1]]
widths <- upper.intervals-lower.intervals # the width of the CI
frac.widths <- widths/(props*100) # the width of the CI normlaized to the proportion counted
object.dir<-list(x=props,y=counts,z=widths)
object.norm <-list(x=props,y=counts,z=frac.widths)
temp2<- seq(00.01,0.19,,140)
temp3<- seq(100,3000,,200)
make.surface.grid(list(temp2,temp3))-> loc2
interp.surface( object.dir, loc2)-> look.dir
interp.surface( object.norm, loc2)-> look.normalized
image.plot(as.surface(loc2, look.dir))
outcome.dir <- as.surface(loc2, look.dir)
outcome.norm <- as.surface(loc2, look.normalized)
library(plot3D)
par(mfrow=c(1,3))
image2D(x=outcome.dir$x,y=outcome.dir$y,outcome.dir$z,resfac = 5,)
image2D(x=outcome.norm$x,y=outcome.norm$y,outcome.norm$z,resfac = 5)
persp3D(z=outcome.norm$z)
listCI <- list(norm=outcome.norm$z,lognorm<-log(outcome.norm$z))
image2D(listCI,x = outcome.norm$x, y = outcome.norm$y, contour = TRUE,
main = c("normailzed", "log(normalized)"),resfac=3)
View(frac.widths)
View(betLB)
library(dplyr)
library("nycflights13")
lights2 <- flights %>% select(year:day, hour, origin, dest, tailnum, carrier)
View(lights2)
lights2 %>%
left_join(airlines)
lights2 %>% left_join(weather)
lights2 %>% left_join(planes, by = "tailnum")
lights2 %>% left_join(airports, c("dest" = "faa"))
lights2 %>% left_join(airports, c("origin" = "faa"))
(df1 <- data_frame(x = c(1, 2), y = 2:1))
df2 <- data_frame(x = c(1, 3), a = 10, b = "a"))
df2 <- data_frame(x = c(1, 3), a = 10, b = "a")
df1 %>% inner_join(df2) %>% knitr::kable()
df1 %>% left_join(df2)
right_join(x, y)
df1 %>% right_join(df2)
df2 %>% left_join(df1)
df1 %>% full_join(df2)
df1 <- data_frame(x = c(1, 1, 2), y = 1:3)
df2 <- data_frame(x = c(1, 1, 2), z = c("a", "b", "a"))
View(df1)
View(df2)
View(df1)
View(df2)
df1 %>% left_join(df2)
df1 %>% left_join(df2)
library("nycflights13")
flights %>%
anti_join(planes, by = "tailnum") %>%
count(tailnum, sort = TRUE)
df1 <- data_frame(x = c(1, 1, 3, 4), y = 1:4)
df2 <- data_frame(x = c(1, 1, 2), z = c("a", "b", "a"))
df1 %>% nrow()
df1 %>% nrow()
df1 %>% inner_join(df2, by = "x") %>% nrow()
df1 %>% semi_join(df2, by = "x") %>% nrow()
df1 %>% inner_join(df2, by = "x")
df1 %>% semi_join(df2, by = "x")
(df1 <- data_frame(x = 1:2, y = c(1L, 1L)))
(df2 <- data_frame(x = 1:2, y = 1:2))
intersect(df1, df2)
union(df1, df2)
setdiff(df1, df2)
setdiff(df2, df1)
setwd("~/Research/klim.dat/Demonstration")
>>>>>>> 45f496a3197d02c0981f985317e6b136150a8d62
