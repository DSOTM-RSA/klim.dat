out<-dataTable %>% group_by(depth) %>% .[,6:10] %>% as.matrix()
View(out)
out<-dataTable %>% group_by(depth) %>% .[,6:10] %>% as.matrix() %>% nest()
out<-dataTable %>% group_by(depth) %>% .[,6:10] %>% as.matrix() %>% dist()
str(out)
library(sparklyr)
library(rsparkling)
library(dplyr)
sc <- spark_connect("local", version = "1.6.2")
mtcars_tbl <- copy_to(sc, mtcars, "mtcars", overwrite = TRUE)
partitions <- mtcars_tbl %>%
filter(hp >= 100) %>%
mutate(cyl8 = cyl == 8) %>%
sdf_partition(training = 0.5, test = 0.5, seed = 1099)
training <- as_h2o_frame(sc, partitions$training)
test <- as_h2o_frame(sc, partitions$test)
partitions2 <- h2o.splitFrame(as_h2o_frame(mtcars_tbl), 0.5))
partitions2 <- h2o.splitFrame(as_h2o_frame(mtcars_tbl), 0.5)
glm_model <- h2o.glm(x = c("wt", "cyl"),
y = "mpg",
training_frame = training,
lambda_search = TRUE)
training <- as_h2o_frame(sc, mtcars_tbl)
install.packages(c("acepack", "checkpoint", "drat", "openssl", "pbapply", "plotmo", "proto", "qgraph", "R.oo", "rprojroot", "sjmisc", "sjPlot", "sjstats", "survival", "tidytext"))
devtools::install_github("leonawicz/mapmate")
library(mapmate)
library(dplyr)
library(RColorBrewer)
pal <- rev(brewer.pal(11, "RdYlBu"))
data(annualtemps)
data(borders)
data(bathymetry)
id <- "frameID"
temps <- mutate(annualtemps, frameID = Year - min(Year) + 1) %>% filter(frameID ==
1)  # subset to first frame
brdrs <- mutate(borders, frameID = 1)
bath <- mutate(bathymetry, frameID = 1)
View(temps)
View(annualtemps)
save_map(temps, id = id, ortho = FALSE, col = "dodgerblue", type = "points",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "#FF4500", type = "points", save.plot = FALSE,
return.plot = TRUE)
save_map(bath, id = id, type = "points", save.plot = FALSE, return.plot = TRUE)
View(brdrs)
save_map(brdrs, id = id, type = "maplines", save.plot = FALSE, return.plot = TRUE)
save_map(brdrs, id = id, lon = -70, lat = 40, rotation.axis = 0, type = "maplines",
save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "maptiles", save.plot = FALSE,
return.plot = TRUE)
View(bath)
View(temps)
View(annualtemps)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", save.plot = FALSE,
return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "only",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "red", type = "points", contour = "overlay",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "blue", type = "points", contour = "only", save.plot = FALSE,
return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = pal, type = "density", contour = "overlay", save.plot = FALSE,
return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "tile", save.plot = FALSE, return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "tile", save.plot = FALSE, return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "polygon", save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "tile", save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "polygon", save.plot = FALSE, return.plot = TRUE)
library(rworldmap)
library(rworldxtra)  # required for 'high' resolution map
library(maptools)  # required for fortify to work
# also recommend installing rgeos
install.packages("rworldmap")
install.packages("rworldxtra")
install.packages("rgeos")
library(rworldmap)
library(rworldxtra)  # required for 'high' resolution map
library(maptools)  # required for fortify to work
# also recommend installing rgeos
spdf <- joinCountryData2Map(countryExData, mapResolution = "high")
spdf@data$id <- rownames(spdf@data)
bio <- ggplot2::fortify(spdf, region = "id") %>% left_join(subset(spdf@data,
select = c(id, BIODIVERSITY)), by = "id") %>% mutate(frameID = 1) %>% rename(lon = long)
gpclibPermit()
bio <- ggplot2::fortify(spdf, region = "id") %>% left_join(subset(spdf@data,
select = c(id, BIODIVERSITY)), by = "id") %>% mutate(frameID = 1) %>% rename(lon = long)
View(bio)
library(raster)
proj4 <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +to wgs84=0,0,0"
z <- "BIODIVERSITY"
# 1-degree resolution, still somewhat coarse
r <- raster(extent(-180, 180, -90, 90), nrow = 180, ncol = 360, proj4)
bio2 <- rasterize(spdf, r, field = z) %>% rasterToPoints %>% tbl_df() %>% setNames(c("lon",
"lat", z)) %>% mutate(frameID = 1)
clrs <- c("royalblue", "purple", "orange", "yellow")
save_map(bio, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "polygons",
save.plot = FALSE, return.plot = TRUE)
clrs <- c("royalblue", "purple", "orange", "yellow")
save_map(bio, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "polygons",
save.plot = FALSE, return.plot = TRUE)
save_map(bio2, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "maptiles",
save.plot = FALSE, return.plot = TRUE)
clrs <- c("royalblue", "purple", "orange", "yellow")
save_map(bio, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "polygons",
save.plot = FALSE, return.plot = TRUE)
library(mlbench)
library(e1071)
data("HouseVotes84")
View(HouseVotes84)
model <- naiveBayes(Class ~ ., data = HouseVotes84)
print(model)
pn <- vector(mode="numeric",length=16)
for (i in 1:16) {
pn[i] <- model$tables[[i]][1,1]
}
dem_data <- matrix(data = NA, nrow = 25, ncol = 17)
for( i in 1:25){
dem_data[i,] <- c("democrat",rbinom(16,1,pn))
}
View(dem_data)
dem_data <- data.frame(dem_data)
View(dem_data)
levels(dem_data[,1]) <- c("democrat","republican")
dem_data[,1] <- factor(dem_data[,1],levels=c("democrat","republican"))
View(dem_data)
for(i in 2:17){
levels(dem_data[,i]) <- c("y","n")
}
View(dem_data)
names(dem_data) <- c("Class","V1","V2","V3","V4","V5","V6","V7","V8",
"V9","V10","V11","V12","V13","V14","V15","V16")
head(dem_data,2)
dim(dem_data)
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
# function to compute the conditional probability
# that a member of a party will cast
# a 'yes' vote for a particular issue.
# The probability is based on all members of the
# party who actually cast a vote on the issue (ignores NAs).
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
#impute missing values.
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='democrat',arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='republican',arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,'democrat'))<
p_y_col_class(i,'democrat'),'y','n')
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,'republican'))<
p_y_col_class(i,'republican'),'y','n')}
}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
# function to compute the conditional probability
# that a member of a party will cast
# a 'yes' vote for a particular issue.
# The probability is based on all members of the
# party who actually cast a vote on the issue (ignores NAs).
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='democrat',arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='republican',arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,'democrat'))<
p_y_col_class(i,'democrat'),'y','n')
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,'republican'))<
p_y_col_class(i,'republican'),'y','n')}
}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))
)
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}))
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
na_by_col_class <-
function (col,cls){(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
na_by_col_class <- function (col,cls){return(sum(is.na(HouseVotes84[,col]) & HouseVotes84$Class==cls))}
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='democrat',arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='republican',arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,'democrat'))<
p_y_col_class(i,'democrat'),'y','n')
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,'republican'))<
p_y_col_class(i,'republican'),'y','n')}
}
View(HouseVotes84)
votes <- HouseVotes84
votes$Class <- ifelse(votes$Class == "democrat", 0, 1)
votes[,2:17] <- sapply(votes[,2:17],
function(x){ifelse(x == "n", 1, 0)})
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
votes_tbl <- copy_to(sc, votes,overwrite=TRUE)
head(votes_tbl)
partitions <- votes_tbl %>%
sdf_partition(training = 0.5,
test = 0.5, seed = 1099)
head(partitions$training)
# pick out the feature variables.
X_names <- names(votes[,2:17])
# Fit model
nb_spark_model <- ml_naive_bayes(partitions$training,
response= "Class",
features = X_names)
nb_spark_model
nb_test_predict <- predict(nb_model,testHouseVotes84[,-1])
#confusion matrix
table(pred=nb_test_predict,true=testHouseVotes84$Class)
setwd("~/Research/klim.dat/Demonstration/downloads/product")
library(dplyr)
library(tidyr)
files <- dir(pattern = '*.txt', full.names = TRUE)
pro.df <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
date.str <- as.character(pro.df$date.start)
date.beg <-as.character(pro.df$date.start) %>% as.Date(., format='%Y%m%d')
diff_in_days = difftime(date.beg, date.beg[1], units = "days")
diff_in_years = as.double(diff_in_days)/365 # absolute years
abs.years<-floor(diff_in_years)
months_diff = as.double(substring(date.str, 5, 6)) - as.double(substring(date.str[1], 5, 6))
total_months = floor(diff_in_years)*12 + months_diff
frame <- mutate(pro.df,frameID = total_months)
View(frame)
frame <- mutate(pro.df,frameID = total_months) %>% .[-114369,]
View(frame)
str(frame)
frame$station.id <- as.factor(frame$station.id)
str(frame)
frame$station.id <- as.numeric(frame$station.id)
str(frame)
setwd("~/Research/klim.dat/Demonstration")
stat.meta<-read.table("stat.csv",header=TRUE, sep =",")
stat.meta$station.id <-stat.meta$stat_id
str(stat.meta)
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.)
str(stat.meta)
library(data.table)
dat.var = as.data.table(frame)
dat.meta = as.data.table(stat.meta)
View(dat.meta)
View(dat.var)
View(dat.meta)
merged.df<-merge(dat.var,dat.meta, by="station.id")
View(merged.df)
View(frame)
View(frame)
frame <- mutate(pro.df,frameID = total_months) %>% .[-114369,] %>% .[order(.$station.id),] # trim to remove erroneous last obs
View(frame)
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.) %>% .[order(.$station.id),]
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.)
View(stat.meta)
plot(stat.meta$station.id)
plot(stat.var$station.id)
plot(frame$station.id)
plot(frame$station.id,frame$station.id)
plot(frame$station.id,frame$station.id,type="l")
plot(frame$station.id,frame$station.id,type="s")
summary(frame)
frame$station.id <- as.factor(frame$station.id)
frame$station.id <- as.numeric(frame$station.id)
frame$precip[frame$precip==-999] <- NA
summary(frame)
tail(frame$station.id)
View(frame)
frame <- mutate(pro.df,frameID = total_months) %>% .[-114369,] # trim to remove erroneous last obs
frame$station.id <- as.factor(frame$station.id)
frame$station.id <- as.numeric(frame$station.id)
frame$precip[frame$precip==-999] <- NA
View(frame)
stat.meta<-read.table("stat.csv",header=TRUE, sep =",")
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.)
View(dat.var)
dat.var = as.data.table(frame)
dat.meta = as.data.table(stat.meta)
merged.df<-merge(dat.var,dat.meta, by="station.id")
str(merged.df)
summary(merged.df)
plot(merged.df$precip)
plot(merged.df$precip=<0)
which(merged.df$precip<0)
which(merged.df$precip=0)
which(merged.df$precip==0)
which(merged.df$precip=<0)
which(merged.df$precip<=0)
frame$precip[frame$precip==-999] <- NA
frame$precip[frame$precip<=0] <- NA
stat.meta<-read.table("stat.csv",header=TRUE, sep =",")
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.)
library(data.table)
dat.var = as.data.table(frame)
dat.meta = as.data.table(stat.meta)
merged.df<-merge(dat.var,dat.meta, by="station.id")
summary(merged.df)
library(mapmate)
library(dplyr)
library(RColorBrewer)
pal <- rev(brewer.pal(11, "RdYlBu"))
data(annualtemps)
data(borders)
data(bathymetry)
id <- "frameID"
temps <- mutate(annualtemps, frameID = Year - min(Year) + 1) %>% filter(frameID ==
1)  # subset to first frame
brdrs <- mutate(borders, frameID = 1)
bath <- mutate(bathymetry, frameID = 1)
View(temps)
save_map(temps, id = id, ortho = FALSE, col = "dodgerblue", type = "points",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "#FF4500", type = "points", save.plot = FALSE,
return.plot = TRUE)
save_map(bath, id = id, type = "points", save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "maptiles", save.plot = FALSE,
return.plot = TRUE)
View(bath)
save_map(temps, id = id,col = z, type = "points", save.plot = FALSE,
return.plot = TRUE)
save_map(temps, id = id,col = col, type = "points", save.plot = FALSE,
return.plot = TRUE)
save_map(temps, id = id, col = "red", type = "points", contour = "overlay",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "blue", type = "points", contour = "only", save.plot = FALSE,
return.plot = TRUE)
save_map(temps, id = id, col = pal, type = "density", contour = "overlay", save.plot = FALSE,
return.plot = TRUE)
xmin <- signif(min(merged.df$lon),4)
xmax <- signif(max(merged.df$lon),4)
ymin <- signif(min(merged.df$lat),5)
ymax <- signif(max(merged.df$lat),5)
gridint <- 500
xmin <- signif(min(merged.df$lon),4) - 0.5
xmax <- signif(max(merged.df$lon),4) + 0.5
ymin <- signif(min(merged.df$lat),5) - 0.5
ymax <- signif(max(merged.df$lat),5) + 0.5
gridint <- 500
fld<- with(merged.df, interp(x = lon, y = lat, z = precip, linear = FALSE, extrap = TRUE,
xo=seq(xmin, xmax, length=gridint),
yo=seq(ymin, ymax, length=gridint)))
library(akima)
fld<- with(merged.df, interp(x = lon, y = lat, z = precip, linear = FALSE, extrap = TRUE,
xo=seq(xmin, xmax, length=gridint),
yo=seq(ymin, ymax, length=gridint)))
merged.df$precip[is.na(merged.df$precip)] <- 0
View(merged.df)
sumamry(merged.df)
summary(merged.df)
fld<- with(merged.df, interp(x = lon, y = lat, z = precip, linear = FALSE, extrap = TRUE,
xo=seq(xmin, xmax, length=gridint),
yo=seq(ymin, ymax, length=gridint)))
out <-split(merged.df,station.id)
out <-split(merged.df,as.factor(station.id))
out <-split(merged.df,as.factor(merged.df$station.id))
res<-lapply(out,interp(x = lon, y = lat, z = precip, linear = FALSE, extrap = TRUE,
xo=seq(xmin, xmax, length=gridint),
yo=seq(ymin, ymax, length=gridint)))
chain <- unique(merged.df$station.id)
i=1
for (i in i:chain){
fld<-with(merged.df,interp(x = lon, y = lat, z = precip, linear = FALSE, extrap = TRUE,
xo=seq(xmin, xmax, length=gridint),
yo=seq(ymin, ymax, length=gridint)))
}
View(merged.df)
library(raster) # if you get an error, type install.packages("raster") at the console
out <-split(merged.df,as.factor(merged.df$frameID))
out$`0`
out$`1`
out$`2`
out <-split(merged.df,as.factor(merged.df$frameID))
out <-split(merged.df,merged.df$frameID)
str(out)
out <-split(merged.df,as.factor(frameID))
out <- split( merged.df , f = merged.df$frameID)
View(frame)
out <- split( frame , f = frame$frameID)
out <- split( frame , f = as.factor(frame$frameID))
fld<- with(merged.df, interp(x = lon, y = lat, z = precip, linear = FALSE, extrap = TRUE,
xo=seq(xmin, xmax, length=gridint),
yo=seq(ymin, ymax, length=gridint)))
fld<- with(merged.df, interp(x = lon, y = lat, z = precip, linear = FALSE, extrap = TRUE,duplicate = mean,
xo=seq(xmin, xmax, length=gridint),
yo=seq(ymin, ymax, length=gridint)))
install.packages("plotKML")
library(sp)
dat <- merged.df
coordinates(dat) <- ~lon+lat
str(dat)
plot(dat)
plot(dat)
plot(dat, pch=20, main="Full Dataset", axes=TRUE)
plot(dat,
bg=rev(heat.colors(5))[cut(dat$precip,breaks=c(0,100,200,300,400,Inf),labels=FALSE)],
col="grey",main="Lead Distribution", pch=21, axes=TRUE)
plot(dat,
bg=rev(heat.colors(5))[cut(dat$precip,breaks=c(0,10,20,100,200,Inf),labels=FALSE)],
col="grey",main="Lead Distribution", pch=21, axes=TRUE)
?coordinates
?crs
me <- spTransform(dat, CRS("+proj=longlat +datum=WGS84"))
proj4string(dat) <- CRS("+proj=longlat +datum=WGS84")
plot(dat,
bg=rev(heat.colors(5))[cut(dat$precip,breaks=c(0,100,200,300,400,Inf),labels=FALSE)],
col="grey",main="Lead Distribution", pch=21, axes=TRUE)
library(ggmap)    # loads ggplot2 as well
map <- get_map(location=rowMeans(bbox(dat)), zoom=5)   # get Google map
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(x,y,fill=precip),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
detach("package:ggplot2", unload=TRUE)
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggmap)    # loads ggplot2 as well
map <- get_map(location=rowMeans(bbox(dat)), zoom=5)   # get Google map
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(x,y,fill=precip),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(lon,lat,fill=precip),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
map <- get_map(location=rowMeans(bbox(dat)), zoom=10)   # get Google map
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(lon,lat,fill=precip),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
map <- get_map(location=rowMeans(bbox(dat)), zoom=6)   # get Google map
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(lon,lat,fill=precip),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
out <- split(merged.df,as.factor(merged.df$frameID))
out$`2000`
out$`1`
out$`2000`
library(akima)
res<-lapply(out,interp(x = lon,y=lat))
res<-lapply(out,interp(x = lon,y=lat,z=precip))
res<-lapply(with(out,interp(x = lon,y=lat,z=precip)))
?lapply
res<-lapply(out$`0`,interp(x = lon,y=lat,z=precip))
res<-lapply(out$0,interp(x = lon,y=lat,z=precip))
out$2500
out$`2000`
max(merged.df$frameID)
out$`2063`
ggmap(map) +
geom_point(data=as.data.frame(dat$frameID==2063), aes(lon,lat,fill=precip),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(lon,lat,fill=precip),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
map <- get_map(location=rowMeans(bbox(dat)), zoom=5)   # get Google map
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(lon,lat,fill=height),
color="grey70", size=3.5, shape=21)+
scale_fill_gradientn(colours=rev(heat.colors(5)))
