save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "#FF4500", type = "points", save.plot = FALSE,
return.plot = TRUE)
save_map(bath, id = id, type = "points", save.plot = FALSE, return.plot = TRUE)
View(brdrs)
save_map(brdrs, id = id, type = "maplines", save.plot = FALSE, return.plot = TRUE)
save_map(brdrs, id = id, lon = -70, lat = 40, rotation.axis = 0, type = "maplines",
save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "maptiles", save.plot = FALSE,
return.plot = TRUE)
View(bath)
View(temps)
View(annualtemps)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", save.plot = FALSE,
return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "only",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "red", type = "points", contour = "overlay",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = "blue", type = "points", contour = "only", save.plot = FALSE,
return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
save.plot = FALSE, return.plot = TRUE)
save_map(temps, id = id, col = pal, type = "density", contour = "overlay", save.plot = FALSE,
return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "tile", save.plot = FALSE, return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "tile", save.plot = FALSE, return.plot = TRUE)
save_map(temps, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "polygon", save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "tile", save.plot = FALSE, return.plot = TRUE)
save_map(bath, z.name = "z", id = id, col = pal, type = "density", contour = "overlay",
density.geom = "polygon", save.plot = FALSE, return.plot = TRUE)
library(rworldmap)
library(rworldxtra)  # required for 'high' resolution map
library(maptools)  # required for fortify to work
# also recommend installing rgeos
install.packages("rworldmap")
install.packages("rworldxtra")
install.packages("rgeos")
library(rworldmap)
library(rworldxtra)  # required for 'high' resolution map
library(maptools)  # required for fortify to work
# also recommend installing rgeos
spdf <- joinCountryData2Map(countryExData, mapResolution = "high")
spdf@data$id <- rownames(spdf@data)
bio <- ggplot2::fortify(spdf, region = "id") %>% left_join(subset(spdf@data,
select = c(id, BIODIVERSITY)), by = "id") %>% mutate(frameID = 1) %>% rename(lon = long)
gpclibPermit()
bio <- ggplot2::fortify(spdf, region = "id") %>% left_join(subset(spdf@data,
select = c(id, BIODIVERSITY)), by = "id") %>% mutate(frameID = 1) %>% rename(lon = long)
View(bio)
library(raster)
proj4 <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +to wgs84=0,0,0"
z <- "BIODIVERSITY"
# 1-degree resolution, still somewhat coarse
r <- raster(extent(-180, 180, -90, 90), nrow = 180, ncol = 360, proj4)
bio2 <- rasterize(spdf, r, field = z) %>% rasterToPoints %>% tbl_df() %>% setNames(c("lon",
"lat", z)) %>% mutate(frameID = 1)
clrs <- c("royalblue", "purple", "orange", "yellow")
save_map(bio, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "polygons",
save.plot = FALSE, return.plot = TRUE)
clrs <- c("royalblue", "purple", "orange", "yellow")
save_map(bio, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "polygons",
save.plot = FALSE, return.plot = TRUE)
save_map(bio2, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "maptiles",
save.plot = FALSE, return.plot = TRUE)
clrs <- c("royalblue", "purple", "orange", "yellow")
save_map(bio, z.name = z, id = id, lon = -10, lat = 20, col = pal, type = "polygons",
save.plot = FALSE, return.plot = TRUE)
library(mlbench)
library(e1071)
data("HouseVotes84")
View(HouseVotes84)
model <- naiveBayes(Class ~ ., data = HouseVotes84)
print(model)
pn <- vector(mode="numeric",length=16)
for (i in 1:16) {
pn[i] <- model$tables[[i]][1,1]
}
dem_data <- matrix(data = NA, nrow = 25, ncol = 17)
for( i in 1:25){
dem_data[i,] <- c("democrat",rbinom(16,1,pn))
}
View(dem_data)
dem_data <- data.frame(dem_data)
View(dem_data)
levels(dem_data[,1]) <- c("democrat","republican")
dem_data[,1] <- factor(dem_data[,1],levels=c("democrat","republican"))
View(dem_data)
for(i in 2:17){
levels(dem_data[,i]) <- c("y","n")
}
View(dem_data)
names(dem_data) <- c("Class","V1","V2","V3","V4","V5","V6","V7","V8",
"V9","V10","V11","V12","V13","V14","V15","V16")
head(dem_data,2)
dim(dem_data)
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
# function to compute the conditional probability
# that a member of a party will cast
# a 'yes' vote for a particular issue.
# The probability is based on all members of the
# party who actually cast a vote on the issue (ignores NAs).
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
#impute missing values.
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='democrat',arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='republican',arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,'democrat'))<
p_y_col_class(i,'democrat'),'y','n')
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,'republican'))<
p_y_col_class(i,'republican'),'y','n')}
}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
# function to compute the conditional probability
# that a member of a party will cast
# a 'yes' vote for a particular issue.
# The probability is based on all members of the
# party who actually cast a vote on the issue (ignores NAs).
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='democrat',arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='republican',arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,'democrat'))<
p_y_col_class(i,'democrat'),'y','n')
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,'republican'))<
p_y_col_class(i,'republican'),'y','n')}
}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))
)
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}))
na_by_col_class <-
function (col,cls){return(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
na_by_col_class <-
function (col,cls){(sum(is.na(HouseVotes84[,col] &
HouseVotes84$Class==cls))}
na_by_col_class <- function (col,cls){return(sum(is.na(HouseVotes84[,col]) & HouseVotes84$Class==cls))}
p_y_col_class <- function(col,cls){
sum_y<-sum(HouseVotes84[,col]=='y' &
HouseVotes84$Class==cls,na.rm = TRUE)
sum_n<-sum(HouseVotes84[,col]=='n' &
HouseVotes84$Class==cls,na.rm = TRUE)
return(sum_y/(sum_y+sum_n))}
for (i in 2:ncol(HouseVotes84)) {
if(sum(is.na(HouseVotes84[,i])>0)) {
c1 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='democrat',arr.ind = TRUE)
c2 <- which(is.na(HouseVotes84[,i])& HouseVotes84$Class=='republican',arr.ind = TRUE)
HouseVotes84[c1,i] <-
ifelse(runif(na_by_col_class(i,'democrat'))<
p_y_col_class(i,'democrat'),'y','n')
HouseVotes84[c2,i] <-
ifelse(runif(na_by_col_class(i,'republican'))<
p_y_col_class(i,'republican'),'y','n')}
}
View(HouseVotes84)
votes <- HouseVotes84
votes$Class <- ifelse(votes$Class == "democrat", 0, 1)
votes[,2:17] <- sapply(votes[,2:17],
function(x){ifelse(x == "n", 1, 0)})
library(sparklyr)
library(dplyr)
sc <- spark_connect(master = "local")
votes_tbl <- copy_to(sc, votes,overwrite=TRUE)
head(votes_tbl)
partitions <- votes_tbl %>%
sdf_partition(training = 0.5,
test = 0.5, seed = 1099)
head(partitions$training)
# pick out the feature variables.
X_names <- names(votes[,2:17])
# Fit model
nb_spark_model <- ml_naive_bayes(partitions$training,
response= "Class",
features = X_names)
nb_spark_model
nb_test_predict <- predict(nb_model,testHouseVotes84[,-1])
#confusion matrix
table(pred=nb_test_predict,true=testHouseVotes84$Class)
s100 <- matrix(c(267573.9, 2633781, 213.29545, 262224.4, 2633781, 69.78261, 263742.7, 2633781, 51.21951, 259328.4, 2633781, 301.98413, 264109.8, 2633781, 141.72414, 255094.8, 2633781, 88.90244),  ncol=3,  byrow=TRUE)
View(s100)
colnames(s100) <- c('X', 'Y', 'Z')
library(raster)
e <- extent(s100[,1:2])
e <- e + 1000 # add this as all y's are the same
r <- raster(e, ncol=10, nrow=2)
x <- rasterize(s100[, 1:2], r, s100[,3], fun=mean)
plot(x)
setwd("~/Research/klim.dat")
setwd("~/Research/klim.dat/Demonstration/downloads/product")
library(dplyr)
library(dplyr)
library(dplyr)
library(tidyr)
files <- dir(pattern = '*.txt', full.names = TRUE)
pro.df <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
date.str <- as.character(pro.df$date.start)
date.beg <-as.character(pro.df$date.start) %>% as.Date(., format='%Y%m%d')
diff_in_days = difftime(date.beg, date.beg[1], units = "days")
diff_in_years = as.double(diff_in_days)/365 # absolute years
abs.years<-floor(diff_in_years)
months_diff = as.double(substring(date.str, 5, 6)) - as.double(substring(date.str[1], 5, 6))
total_months = floor(diff_in_years)*12 + months_diff
frame <- mutate(pro.df,frameID = total_months) %>% .[-114369,] # trim to remove erroneous last obs
frame$station.id <- as.factor(frame$station.id)
frame$station.id <- as.numeric(frame$station.id)
frame$precip[frame$precip==-999] <- NA
frame$precip[frame$precip<=0] <- NA
stat.meta<-read.table("stat.csv",header=TRUE, sep =",")
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.)
setwd("~/Research/klim.dat/Demonstration")
stat.meta<-read.table("stat.csv",header=TRUE, sep =",")
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.)
library(data.table)
dat.var = as.data.table(frame)
dat.meta = as.data.table(stat.meta)
merged.df<-merge(dat.var,dat.meta, by="station.id")
merged.df$precip[is.na(merged.df$precip)] <- 0
View(merged.df)
x.range <- as.numeric(c(min(merged.df$lon), max(merged.df$lon)))  # min/max longitude of the interpolation area
y.range <- as.numeric(c(min(merged.df$lat), max(merged.df$lon)))  # min/max latitude of the interpolation area
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))
y.range <- as.numeric(c(min(merged.df$lat), max(merged.df$lat)))  # min/max latitude of the interpolation area
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.1), y = seq(from = y.range[1],
to = y.range[2], by = 0.1))
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd, cex = 1.5, col = "grey")
library(sp)
dat <- merged.df
coordinates(dat) <- ~lon+lat
points(dat, pch = 1, col = "red", cex = 1)
idw <- idw(formula = may12 ~ 1, locations = dat,
newdata = grd)  # apply idw model for the data
library(gstat)
idw <- idw(formula = may12 ~ 1, locations = dat,
newdata = grd)  # apply idw model for the data
idw <- idw(formula = precip ~ 1, locations = dat,
newdata = grd)  # apply idw model for the data
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
library(ggmap)    # loads ggplot2 as well
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
geom_point(data = estonia_air_temperature_2, aes(x = lon, y = lat), shape = 21,
colour = "red")
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred)) +
geom_point(data = dat, aes(x = lon, y = lat), shape = 21,
colour = "red")
View(idw.output)
View(idw.output)
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred))
proj4string(dat) <- CRS("+proj=longlat +datum=WGS84")
map <- get_map(location=rowMeans(bbox(dat)), zoom=5)   # get Google map
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(lon,lat,fill=height),
color="grey70", size=3.5, shape=21) +
scale_fill_gradientn(colours=rev(heat.colors(5)))
out <- split(merged.df,as.factor(merged.df$frameID))
ggmap(map) +
geom_point(data=as.data.frame(dat), aes(lon,lat,fill=height),
color="grey70", size=3.5, shape=21) +
scale_fill_gradientn(colours=rev(heat.colors(5))) + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred))
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred))
View(idw.output)
idw <- idw(formula = height ~ 1, locations = dat,
newdata = grd)  # apply idw model for the data
dat <- merged.df
coordinates(dat) <- ~lon+lat
idw <- idw(formula = height ~ 1, locations = dat,
newdata = grd)  # apply idw model for the data
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
View(idw.output)
grd <- expand.grid(x = seq(from = x.range[1], to = x.range[2], by = 0.25), y = seq(from = y.range[1],
to = y.range[2], by = 0.25))
coordinates(grd) <- ~x + y
gridded(grd) <- TRUE
plot(grd, cex = 1.5, col = "grey")
points(dat, pch = 1, col = "red", cex = 1)
idw <- idw(formula = precip ~ 1, locations = dat,
newdata = grd)  # apply idw model for the data
idw.output = as.data.frame(idw)  # output is defined as a data table
names(idw.output)[1:3] <- c("long", "lat", "var1.pred")  # give names to the modelled variables
ggplot() + geom_tile(data = idw.output, aes(x = long, y = lat, fill = var1.pred))
e <- extent(merged.df[,c(11,10)])
e <- extent(merged.df[,10:11])
e <- extent(xrange,y.range)
e <- extent(x.range,y.range)
r <- raster(e, ncol=10, nrow=2)
xx <- rasterize(merged.df[, 10:11], r, s100[,6], fun=mean)
View(frame)
library(dplyr)
df <- frame %>% filter(.,frameID==2000)
View(df)
df <- merged.df %>% filter(.,frameID==2000)
View(df)
fld <- with(df, interp(x = lon, y = lat, z = precip))
library(akima)
fld <- with(df, interp(x = lon, y = lat, z = precip))
filled.contour(x = fld$x,
y = fld$y,
z = fld$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Rwandan rainfall",
key.title = title(main = "Rain (mm)", cex.main = 1))
deu <- get_map(location=rowMeans(bbox(dat)), zoom=5,
maptype = "toner",
source = "stamen")
g1 <- ggmap(deu)
g1
deu <- get_map(location=rowMeans(bbox(dat)), zoom=8,
maptype = "toner",
source = "stamen")
g1 <- ggmap(deu)
g1
deu2 <- get_map(location=rowMeans(bbox(dat)), zoom=5,
maptype = "terrain")
g2 <- ggmap(deu2)
g2
deu2 <- get_map(location=rowMeans(bbox(dat)), zoom=6,
maptype = "terrain")
g2 <- ggmap(deu2)
g2
g2 +
geom_tile(data = df, aes(x = lon, y = lat, z = precip, fill = precip), alpha = 0.8) +
stat_contour(data = df, aes(x = lon, y = lat, z = precip)) +
ggtitle("Rwandan rainfall") +
xlab("Longitude") +
ylab("Latitude") +
scale_fill_continuous(name = "Rain (mm)",
low = "white", high = "blue") +
theme(plot.title = element_text(size = 25, face = "bold"),
legend.title = element_text(size = 15),
axis.text = element_text(size = 15),
axis.title.x = element_text(size = 20, vjust = -0.5),
axis.title.y = element_text(size = 20, vjust = 0.2),
legend.text = element_text(size = 10)) +
coord_map()
View(df)
df <- merged.df %>% filter(.,frameID==2000)
fld <- with(df, interp(x = lon, y = lat, z = precip))
filled.contour(x = fld$x,
y = fld$y,
z = fld$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "German rainfall",
key.title = title(main = "Rain (mm)", cex.main = 1))
View(df)
filled.contour(x = fld$x,
y = fld$y,
z = fld$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "German rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
filled.contour(x = fld$x,
y = fld$y,
z = fld$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "German Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
filled.contour(x = fld$x,
y = fld$y,
z = fld$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
fld$y
with(out$`2000`, interp(x = lon, y = lat, z = precip))
with(out$1, interp(x = lon, y = lat, z = precip))
with(out$`0`, interp(x = lon, y = lat, z = precip))
with(out$`1`, interp(x = lon, y = lat, z = precip))
with(out$`10`, interp(x = lon, y = lat, z = precip))
with(out$`100`, interp(x = lon, y = lat, z = precip))
with(out$`240`, interp(x = lon, y = lat, z = precip))
with(out$`500`, interp(x = lon, y = lat, z = precip))
with(out$`240`, interp(x = lon, y = lat, z = precip))
with(out$`600`, interp(x = lon, y = lat, z = precip))
sta<-with(out$`600`, interp(x = lon, y = lat, z = precip))
df.sta <- merged.df %>% filter(.,frameID==600)
sta<-with(out$`600`, interp(x = lon, y = lat, z = precip))
View(df.sta)
with(out$`400`, interp(x = lon, y = lat, z = precip))
with(out$`450`, interp(x = lon, y = lat, z = precip))
df.sta <- merged.df %>% filter(.,frameID==450)
sta<-with(out$`450`, interp(x = lon, y = lat, z = precip))
sta$z
filled.contour(x = sta$x,
y = sta$y,
z = sta$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
sta<-with(df.sta, interp(x = lon, y = lat, z = precip))
filled.contour(x = sta$x,
y = sta$y,
z = sta$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
df.sta <- merged.df %>% filter(.,frameID==450)
sta<-with(df.sta, interp(x = lon, y = lat, z = precip))
filled.contour(x = sta$x,
y = sta$y,
z = sta$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
fld <- with(df, interp(x = lon, y = lat, z = precip))
filled.contour(x = fld$x,
y = fld$y,
z = fld$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
str(sta$z)
(sta$z)
df.sta <- merged.df %>% filter(.,frameID==600)
sta<-with(df.sta, interp(x = lon, y = lat, z = precip))
filled.contour(x = sta$x,
y = sta$y,
z = sta$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
View(df.sta)
t<-with(out$`450`, interp(x = lon, y = lat, z = precip))
t<-with(out$`600`, interp(x = lon, y = lat, z = precip))
filled.contour(x = t$x,
y = t$y,
z = t$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall January 1894",
key.title = title(main = "Rain (mm)", cex.main = 1))
