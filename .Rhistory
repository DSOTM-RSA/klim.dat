View(MSM48_CTD_MSM48_CTD)
View(stationData)
names(stationData) <- c("Station","Date","Lat","Lon","Elevation","Depth","Salinity","Temp","O2")
View(stationData)
View(stationData)
library(dplyr)
library(tidyr)
site <- stationData %>% select(Station == "GeoB20305-1")
View(stationData)
str(stationData)
stationData$Station <- as.character(stationData$Station)
site <- stationData %>% select(Station == "GeoB20305-1")
View(stationData)
str(stationData)
site <- stationData %>% select(Lat == 31.3723)
site <- stationData %>% filter(Lat == 31.3723)
site2 <- stationData %>% filter(Station == "GeoB20305-1")
plot(site$Depth,site$O2)
plot(site$Depth,site$O2,type="l")
View(site)
botO2 <<- mean(site$O2>=5006)
botO2 <- mean(site$O2>=5006)
botO2 <- mean(site$Depth>=5006)
botO2 <- mean(site$O2[5006:5016])
botO2 <- mean(site$O2[5007:5016])
botT <- mean(site$Temp[5007:5016])
botS <- mean(site$Salinity[5007:5016])
install.packages(c("aqp", "caret", "checkmate", "clusterSim", "ecospat", "gdtools", "ggrepel", "gtrendsR", "Hmisc", "ReporteRs", "ResourceSelection", "rms", "rvg", "shiny", "shinyjs", "svglite", "Zelig"))
setwd("~/Research/MAP")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=FALSE,
prompt=FALSE,
tidy=FALSE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(plyr)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
source("R/howarthCI.R") # compute Howarth CI's
source("R/computeSPG.R") # compute sample-concentrations
source("R/threshCounts.R") # threshold a dataset by prevalence
source("R/degRates.R") # computation of various degradation measures
source("R/utility_writer.R") # convenience wrapper: writes lists of dfs
source("R/customTheme.R") # my custom ggplot blank theme
where<-getwd()	# get home-dir
dataTable <- read.table("data/MAP_dat.tsv",header=T) # read in count data
write.table(dataTable,file="data/rawData-in-out.tsv",sep="\t",col.names=T,row.names = FALSE) # write out all
dt <-gather(dataTable,key="property",value="frac_species",-name,-depth,-sam,-dw)%>%
mutate(property=factor(property, levels = unique(property))) %>%
group_by(name,depth,dw,property) %>% summarise(Total=sum(frac_species)) %>%
spread(property,Total) %>% ungroup() %>% mutate(sample_Size = rowSums(.[5:35])) # aggregate by sam and depth
sampled_dt <- dataTable %>% group_by(depth) %>% nest() %>% mutate(n=2) %>% # example of using purrr for sampling
mutate(samp=map2(data,n,sample_n,replace=TRUE)) %>% select(depth,samp) %>% unnest()
# Prevalence frames
occurences.bottom <- gather(dataTable,key="property",value="frac_grams",-name,-depth,-sam,-dw,-frac) %>%
group_by(property) %>% filter(depth >=699) %>% summarise(Total=sum(frac_grams)) %>%
.[order(-.$Total),]  %>% mutate(Prevelance=round((.$Total / sum(.$Total)*100),2)) # lower part core species-core distribution
occurences.top <- gather(dataTable,key="property",value="frac_grams",-name,-depth,-sam,-dw,-frac) %>%
group_by(property) %>% filter(depth <=670) %>% summarise(Total=sum(frac_grams)) %>%
.[order(-.$Total),]  %>% mutate(Prevelance=round((.$Total / sum(.$Total)*100),2)) # upper part core species-distribution
occurences.total <- gather(dataTable,key="property",value="frac_grams",-name,-depth,-sam,-dw,-frac) %>%
group_by(property) %>% summarise(Total=sum(frac_grams)) %>%
.[order(-.$Total),]  %>% mutate(Prevelance=round((.$Total / sum(.$Total)*100),2)) # entire core species distribution
# Various Assemblages
common.species.80 <- dt %>% select(Brsp:Pyrt) %>% .[,colSums(.[,]>=1)>=nrow(.)*0.8] %>%
mutate(A.I.Ratio = round(rowSums(.)/rowSums(dt[,5:35]),2)) # choose species by prevalance 80%
common.species.50 <- dt %>% select(Brsp:Pyrt) %>% .[,colSums(.[,]>=1)>=nrow(.)*0.5] %>%
mutate(A.I.Ratio = round(rowSums(.)/rowSums(dt[,5:35]),2)) # choose species by prevalance 50%
common.species.chi.sq <- dt %>% select(Brsp:Pyrt) %>% .[,colSums(.[,]>=5)>=nrow(.)*0.8] %>%
mutate(A.I.Ratio = round(rowSums(.)/rowSums(dt[,5:35]),2)) # strict chi.sq criteria selection (n>5 @ 80%)
# Noting which species are 'rare'
common.exceptions <- setdiff(colnames(select(dt,Brsp:Pyrt)),colnames(select(common.species.50,Brsp:Pdal))) # find difference between two dfs
totCEx <- dt %>% select(Brsp:Pyrt) %>% select(one_of(common.exceptions)) %>% rowSums(.) # how many others?
common.species.base <- dt %>% select(Brsp:Pyrt) %>% select(-one_of(common.exceptions)) %>% mutate(.,Other=totCEx) %>% tbl_df (.) # select all species which are NOT (-one_of) exceptions, add total count of common exceptions
kable(common.species.base,caption = "Table of Counts vs Depth (not shown) for Base-Assemblage for Maderia Abyssal Plain Core GeoB20305-7/7 -- 7/8") # display of base species assemblage
species.Proportions <- common.species.base %>% `/` (rowSums(.)) %>% `/` (0.01) %>% round(2) # compute proportions
CI.LowerBounds <- common.species.base %>% as.matrix() %>%
betLB(n=.,N=rowSums(.),alpha=0.025) %>% round(2) # pure Howarth CI Lower
CI.UpperBounds <- common.species.base %>% as.matrix() %>%
betUB(n=.,N=rowSums(.),alpha=0.025) %>% round(2) # pure Howarth CI Upper
dt$samConc <- dt %$% sPg(sample_Size,dw,frac) %>%  round(2)	# compute bulk sample concentrations
species.Concentrations <- species.Proportions %>% `/` (100) %>% `*` (dt$samConc) %>% round(2) # species concentrations
dt$samConc.LL <- CI.LowerBounds %>% `/` (100) %>% `*` (dt$samConc) %>% rowSums(.) %>% round(2) # lower bulk CI bounds
dt$samConc.UL <- CI.UpperBounds %>% `/` (100) %>% `*` (dt$samConc) %>% rowSums(.) %>% round(2) # upper  bulk CI bounds
kable(dt,caption = "Table of Counts, Concentrations and CI's for Maderia Abyssal Plain Core GeoB20305-7/7 -- 7/8") 	# display table of data with total conc, and CI intervals
source("R/basicDiagnostic.R") # diagnostic tables - computes Proportions/Concentrations for each sample
source("R/diagPlots.R") # diagnostic plots - plots of avg concentrations over time
compos.conc <- dt %>% select(name,depth) %>% cbind(species.Concentrations) %>%
gather(.,key="Species",value="Concentration",-name,-depth) %>% spread(Species,Concentration) %>%
arrange(.,-depth) %>% filter(.,depth > 656.0 & depth < 698) # choose relevant section of core
compos.conc.raw.input.kt <- compos.conc %>% select(-name,-depth) %>% t(.) %>% data.frame() # extract only values
compos.combin <-combn(ncol(compos.conc.raw.input.kt),2) # create combinations of all columns (i.e depths)
colnames(compos.combin)<-lapply(combn(compos.conc$depth,2,simplify=FALSE),
function(x) paste(x,collapse="-")) # give combination matrix useful names ("depth-intervals")
deg.species.output <- alply(compos.combin,2,deg.rate.kt,df=compos.conc.raw.input.kt,.dims=TRUE) %>%  # compute kt for selection of samples
lapply(., function(x) cbind(x, ranking = rank(x))) %>%  # bind with  simple ranks
.[c(1:12)] # reduce to necessary ranges
deg.species.vals <- deg.species.output %>% {data.frame(lapply(., `[`, 1))}  # extract outcomes to df
deg.species.ranks <- deg.species.output %>% {data.frame(lapply(., `[`, 2))} # extract outcomes to df
colnames(deg.species.vals) <- names(deg.species.output); colnames(deg.species.ranks) <- names(deg.species.output) # transfer column names for clarity
# calculating for total bulk
bulk <-colSums(compos.conc.raw.input.kt)
deg.bulk.output<-alply(compos.combin,2,deg.rate.neg.kt,df=bulk,.dims=TRUE) %>% .[c(3:17)] # using NEG KT form!
deg.bulk.vals<- deg.bulk.output %>% {data.frame(lapply(., `[`, 1))} %>% t(.)  # extract to df
library(corrr)
var.groups <- species.Concentrations[4:15,]
corr.plot<-var.groups %>% correlate() %>% rearrange()
var.groups %>% correlate() %>% network_plot(min_cor = 0.85)
# aggregate based on correlation reln
common.species.agg <- species.Concentrations %>% select(Brsp:Other) %>% mutate(A=Snep+Squa+Brsp+Esp1+Egra+Eacu+Other,
B=Ipat+Iacu+Lmac+Sps1+Istr+Spac+Ocen+Nlab,
C=Pdal+Spme, D = Ivel+Spra+Isph) %>% select(-(Brsp:Other))
# aggregate manual custom ---> move to back
common.species.meta.agg <- species.Concentrations %>% select(Brsp:Other) %>%  mutate(A = Brsp+Esp1+Eacu+Egra+Snep+Other,
B = Sps1+Spac+Spra+Spme, C = Lmac+Ocen+Ivel+Spme+Pdal, D = Iacu+Ipat+Istr) %>%
select(-Brsp,-Esp1,-Eacu,-Egra,-Other,-Iacu,-Ipat,-Istr,-Lmac,-Ocen,-Pdal,-Ivel,-Sps1,-Spac,-Spra,-Spme) %>% select(A:D)  # combine species into 4 groups
# calculate pseudo time after Huguet et al., 2008
# time of oxygen is proportional to the inverse of the depth interval to the oxidation front (Buckley and Cranston, 1988)
y.dat <- dt %>% select(.,depth) %>% cbind(common.species.agg) # bind with depth data
dis.ox.front <- y.dat$depth[16]-y.dat$depth # compute distance from oxic front
y.dat<- y.dat %>% cbind(.,dis.ox.front) %>% mutate(.,pseudo.time = log10(dis.ox.front^2),all=A+B+C+D) %>%
mutate(.,pseudo.time.shf = pseudo.time+pseudo.time[15]*-1) # shift time to actual beginning of OF
#estimate oxidation exposure time for my HD data (Buckley and Cranston, 1988)
library(readxl)
geoB<-read_excel("data/GeoB20305-7_alldata.xlsx", sheet = 1) # load data for TOC from GV
geoB.time.dat <- geoB %>% .[9:28,c(2,3,4,9)] %>% .[-17,]%>% cbind(y.dat[c(1:11,13,15,17,19:23),],.) # low-res data merge with GV's data
# apply to my data
dTOC <- mean(geoB.time.dat$`Kohlenstoff  (TOC)`[c(14,15,16)])-geoB.time.dat$`Kohlenstoff  (TOC)`[4] # change in TOC from GV data
dZy <- (y.dat$depth[16]-y.dat$depth[4])^2 # distance squared from my HD data
K = 10 # assume a "K" (term balancing TOC and O2 diffussion)
exp.time.calc <-dTOC*dZy*K # total time passed
y.dat$oxidationTime <- round(exp.time.calc*(y.dat$pseudo.time/y.dat$pseudo.time[4]),-1) # compute time slices
y.dat$oxidationTimeShf <- round(exp.time.calc*(y.dat$pseudo.time.shf/y.dat$pseudo.time.shf[4]),-1) # compute shifted time slices
ggK <- cbind(y.dat,dt[,36:39]) %>% filter(depth < 696.5) %>% mutate(oxAdd = oxidationTime+1,oxAddShf=oxidationTimeShf+1,deg=rev(deg.bulk.vals)) # join estimates with CI data
plot(y.dat$dis.ox.front[5:15],y.dat$oxidationTimeShf[5:15])
# plot Main
ggplot(ggK, aes(oxAddShf,samConc)) + geom_ribbon(aes(ymin = samConc.LL, ymax = samConc.UL), fill = "grey70",alpha=0.25) +
geom_point(aes(size=sample_Size)) + geom_line() +
labs(title = "Dinocyst Concentration versus Estimated Oxidation Exposure Time", x = "Oxidation Exposure Time (yr.-1)",
y = "Dinocyst Concentration (cysts.g-1)", size = "Sample Size") +
theme_bw() + theme(panel.grid = element_line(linetype = 0))
ggKlin <-ggK[6:15,]
ggplot(ggKlin,aes(oxAddShf,deg)) + geom_point(aes(size=sample_Size)) + geom_line() +
labs(title = "Dinocyst Concentration versus Estimated Oxidation Exposure Time", x = "Oxidation Exposure Time (yr.-1)",
y = "Dinocyst Concentration (cysts.g-1)", size = "Sample Size") +
theme_bw() + theme(panel.grid = element_line(linetype = 0))
ggKexp<- ggK[2:15,]
m.exp <- nls(samConc ~ I(a*exp(b*oxAddShf)), data = ggKexp, start = list(a=10000,b=-0.003),trace=TRUE)
(RSS.p <- sum(residuals(m.exp)^2))
(TSS <- sum((ggKexp$samConc - mean(ggKexp$samConc))^2))  # Total sum of squares
ggK.mod.res<-as.character((round(1 - (RSS.p/TSS),3))) # R2
ggplot(ggKexp, aes(oxAddShf, samConc)) +geom_ribbon(aes(ymin = samConc.LL, ymax = samConc.UL),fill = "grey70",alpha=0.25) + geom_point() +
geom_smooth(method="nls",se=FALSE, method.args=list(formula=y~a*exp(b*x),start=list(a=10000,b=-0.003))) +
labs(title = "Dinocyst Concentration versus Estimated Oxidation Exposure Time", x = "Oxidation Exposure Time (yr.-1)",
y = "Dinocyst Concentration (cysts.g-1)", size = "Sample Size") +
theme_bw() + theme(panel.grid = element_line(linetype = 0)) + annotate("text", x = 5250, y = 14000, label = paste0("R2 = ",ggK.mod.res),size=3)
ggmultiK <- gather(ggK,key="property",value="specgroups",A,B,C,D) %>% mutate(property=factor(property, levels = unique(property)))
ggplot(ggmultiK,aes(oxidationTime,specgroups)) + geom_point(aes(colour=property)) + geom_line(aes(colour=property)) +
labs(title="Dinocyst Group Decay with Time", x = "Oxidation Exposure Time (yr.-1)", y ="Dinocyst Concentration (cysts.g-1)",
colour = "Species Groups") + theme_basic()
utility_writer(deg.species.output,"output/") # wrtie out data into appendices
save.image(file="output/allDataMAP.RData")
save(dt,file = "output/dtMAP.RData") #save as RData
save(dt,file = "MAT-Exercise/dtMAP.RData") #save for MAT analysis
copy <- dataTable
all.samples <- copy %>% select(Brsp:Pyrt) %>% mutate(sampleSize = rowSums(.)) %>%
mutate(frac=copy$frac) %>% mutate(amount = copy$dw) # choose species
View(all.samples)
all.samples$SamConc <- all.samples %$% sPg(sampleSize,amount,frac) %>% round(2) # total conc
all.species.prop <- all.samples %>% select(Brsp:Pyrt) %>% `/` (rowSums(.)) %>% `*` (100) %>% round(1)  # compute prop %>%
all.species.conc <- all.species.prop %>% `/` (100) %>% `*` (all.samples$SamConc) %>% round(-1) # compute conc
all.samples.conc.bound <- copy %>% select(name:sam) %>% cbind(., all.species.conc) %>% .[order(.$depth,.$sam),]
all.samples.prop.bound <- copy %>% select(name:sam) %>% cbind(., all.species.prop) %>% .[order(.$depth,.$sam),]
View(all.samples.conc.bound)
ggASC <- all.samples.conc.bound %>% mutate(tot = .[6:36])
ggASC <- all.samples.conc.bound %>% mutate(tot = .[,6:36])
ggASC <- all.samples.conc.bound %>% mutate(tot = rowSums(all.species.conc))
View(ggASC)
View(all.samples.conc.bound)
View(all.samples)
all.species.prop <- all.samples %>% select(Brsp:Pyrt) %>% `/` (rowSums(.)) %>% `*` (100) %>% round(1)  # compute prop %>%
all.species.conc <- all.species.prop %>% `/` (100) %>% `*` (all.samples$SamConc) %>% round(-1) # compute conc
View(all.samples.conc.bound)
View(all.samples)
ggASC <- all.samples.conc.bound %>% mutate(tot = sum(.[,6:36]))
View(ggASC)
ggASC <- all.samples.conc.bound %>% mutate(tot = rowSums(.[,6:36]))
View(ggASC)
ggplot(all.samples.conc.bound, aes(depth,tot))
ggplot(ggASC, aes(depth,tot))
ggASC <- all.samples.conc.bound %>% mutate(tot = rowSums(.[,6:36])) +geom_point()
ggplot(ggASC, aes(depth,tot)) + geom_point()
ggplot(ggASC, aes(depth,tot)) + geom_point() + geom_line()
ggplot(ggASC, aes(depth,tot)) + geom_point() + geom_line() + geom_smooth()
ggplot(ggASC, aes(depth,tot)) + geom_point() + geom_line()
ggplot(ggASC, aes(depth,tot)) + geom_point()
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary()
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(fun.y = median,colour="red")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(fun.y = median,colour=red)
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(fun.y = median,colour="red")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(fun.y = median)
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary()
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(mapping = aes(colour="red"))
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary()
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(fun.y = "mean")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary()
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(colour="red")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(colour="pink")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(colour="grey")
ggplot(ggASC, aes(depth,tot)) + geom_point(colour="grey") +stat_summary(colour="black")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(colour="blue")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(colour="green")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(colour="blue")
ggplot(ggASC, aes(tot,depth)) + geom_point() +stat_summary(colour="blue")
ggplot(ggASC, aes(depth,tot)) + geom_point() +stat_summary(colour="blue")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(colour="blue") +geom_line()
g<-ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(colour="blue") +geom_line()
g$layers
g$mapping
g<-ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(colour="blue")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(colour="blue")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(geom="line",colour="blue")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(geom="line",colour="blue",fun.y = "mean")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(geom="line",colour="blue",fun.y = "median")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(colour="blue",fun.y = "mean")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(geom="point",colour="blue",fun.y = "mean")
?stat_summary()
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(geom="bar",colour="blue",fun.y = "mean")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(geom="point",colour="blue",fun.y = "mean")
ggplot(ggASC, aes(depth,tot)) + geom_point() + stat_summary(geom="line",colour="blue",fun.y = "mean")
ggplot(ggASC, aes(depth,tot)) + geom_point()
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean")
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +theme_bw() +theme_basic()
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") + theme_basic()
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic()
ggASC <- all.samples.conc.bound %>% mutate(tot = rowSums(.[,6:36]))
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic()
ggplot(ggASC, aes(tot,depth)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic()
ggplot(ggASC, aes(tot,depth)) + geom_point()
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic()
View(all.samples)
View(all.samples.conc.bound)
View(ggK)
View(all.samples)
sum(all.samples$sampleSize)
View(ggASC)
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic() +coord_flip()
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic() +coord_flip() +scale_y_reverse()
ggplot(ggASC, aes(depth,tot)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic() +coord_flip() +scale_x_reverse()
View(ggASC)
ggASC <- all.samples.conc.bound %>% mutate(Total = rowSums(.[,6:36]))
ggplot(ggASC, aes(depth,Total)) + geom_point()+ stat_summary(geom="line",colour="blue",fun.y = "mean") +
labs(title = "Dinocyst Concentration versus Sample Depth", x = "Sample Depth (cm.-1)",
y = "Dinocyst Concentration (cysts.g-1)")+ theme_basic() +coord_flip() +scale_x_reverse()
write.table(all.samples.conc.bound,file=paste0(where,"/output/individual-samples/raw-conc.tsv"),sep="\t",col.names=T,row.names = FALSE)
write.table(all.samples.prop.bound,file=paste0(where,"/output/individual-samples/raw-prop.tsv"),sep="\t",col.names=T,row.names=FALSE)
write.table(ggASC,file=paste0(where,"/output/individual-samples/raw-concentrations-table.tsv"),sep="\t",col.names=T,row.names=FALSE)
rm(copy,all.samples,all.samples.prop.bound,all.samples.conc.bound,all.species.conc,all.species.prop.ggASC)
setwd("~/Research/MAP")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=FALSE,
prompt=FALSE,
tidy=FALSE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(plyr)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
source("R/howarthCI.R") # compute Howarth CI's
source("R/computeSPG.R") # compute sample-concentrations
source("R/threshCounts.R") # threshold a dataset by prevalence
source("R/degRates.R") # computation of various degradation measures
source("R/utility_writer.R") # convenience wrapper: writes lists of dfs
source("R/customTheme.R") # my custom ggplot blank theme
where<-getwd()	# get home-dir
dataTable <- read.table("data/MAP_dat.tsv",header=T) # read in count data
write.table(dataTable,file="data/rawData-in-out.tsv",sep="\t",col.names=T,row.names = FALSE) # write out all
dt <-gather(dataTable,key="property",value="frac_species",-name,-depth,-sam,-dw)%>%
mutate(property=factor(property, levels = unique(property))) %>%
group_by(name,depth,dw,property) %>% summarise(Total=sum(frac_species)) %>%
spread(property,Total) %>% ungroup() %>% mutate(sample_Size = rowSums(.[5:35])) # aggregate by sam and depth
sampled_dt <- dataTable %>% group_by(depth) %>% nest() %>% mutate(n=2) %>% # example of using purrr for sampling
mutate(samp=map2(data,n,sample_n,replace=TRUE)) %>% select(depth,samp) %>% unnest()
# Prevalence frames
occurences.bottom <- gather(dataTable,key="property",value="frac_grams",-name,-depth,-sam,-dw,-frac) %>%
group_by(property) %>% filter(depth >=699) %>% summarise(Total=sum(frac_grams)) %>%
.[order(-.$Total),]  %>% mutate(Prevelance=round((.$Total / sum(.$Total)*100),2)) # lower part core species-core distribution
occurences.top <- gather(dataTable,key="property",value="frac_grams",-name,-depth,-sam,-dw,-frac) %>%
group_by(property) %>% filter(depth <=670) %>% summarise(Total=sum(frac_grams)) %>%
.[order(-.$Total),]  %>% mutate(Prevelance=round((.$Total / sum(.$Total)*100),2)) # upper part core species-distribution
occurences.total <- gather(dataTable,key="property",value="frac_grams",-name,-depth,-sam,-dw,-frac) %>%
group_by(property) %>% summarise(Total=sum(frac_grams)) %>%
.[order(-.$Total),]  %>% mutate(Prevelance=round((.$Total / sum(.$Total)*100),2)) # entire core species distribution
# Various Assemblages
common.species.80 <- dt %>% select(Brsp:Pyrt) %>% .[,colSums(.[,]>=1)>=nrow(.)*0.8] %>%
mutate(A.I.Ratio = round(rowSums(.)/rowSums(dt[,5:35]),2)) # choose species by prevalance 80%
common.species.50 <- dt %>% select(Brsp:Pyrt) %>% .[,colSums(.[,]>=1)>=nrow(.)*0.5] %>%
mutate(A.I.Ratio = round(rowSums(.)/rowSums(dt[,5:35]),2)) # choose species by prevalance 50%
common.species.chi.sq <- dt %>% select(Brsp:Pyrt) %>% .[,colSums(.[,]>=5)>=nrow(.)*0.8] %>%
mutate(A.I.Ratio = round(rowSums(.)/rowSums(dt[,5:35]),2)) # strict chi.sq criteria selection (n>5 @ 80%)
# Noting which species are 'rare'
common.exceptions <- setdiff(colnames(select(dt,Brsp:Pyrt)),colnames(select(common.species.50,Brsp:Pdal))) # find difference between two dfs
totCEx <- dt %>% select(Brsp:Pyrt) %>% select(one_of(common.exceptions)) %>% rowSums(.) # how many others?
common.species.base <- dt %>% select(Brsp:Pyrt) %>% select(-one_of(common.exceptions)) %>% mutate(.,Other=totCEx) %>% tbl_df (.) # select all species which are NOT (-one_of) exceptions, add total count of common exceptions
kable(common.species.base,caption = "Table of Counts vs Depth (not shown) for Base-Assemblage for Maderia Abyssal Plain Core GeoB20305-7/7 -- 7/8") # display of base species assemblage
species.Proportions <- common.species.base %>% `/` (rowSums(.)) %>% `/` (0.01) %>% round(2) # compute proportions
CI.LowerBounds <- common.species.base %>% as.matrix() %>%
betLB(n=.,N=rowSums(.),alpha=0.025) %>% round(2) # pure Howarth CI Lower
CI.UpperBounds <- common.species.base %>% as.matrix() %>%
betUB(n=.,N=rowSums(.),alpha=0.025) %>% round(2) # pure Howarth CI Upper
dt$samConc <- dt %$% sPg(sample_Size,dw,frac) %>%  round(2)	# compute bulk sample concentrations
species.Concentrations <- species.Proportions %>% `/` (100) %>% `*` (dt$samConc) %>% round(2) # species concentrations
dt$samConc.LL <- CI.LowerBounds %>% `/` (100) %>% `*` (dt$samConc) %>% rowSums(.) %>% round(2) # lower bulk CI bounds
dt$samConc.UL <- CI.UpperBounds %>% `/` (100) %>% `*` (dt$samConc) %>% rowSums(.) %>% round(2) # upper  bulk CI bounds
kable(dt,caption = "Table of Counts, Concentrations and CI's for Maderia Abyssal Plain Core GeoB20305-7/7 -- 7/8") 	# display table of data with total conc, and CI intervals
source("R/basicDiagnostic.R") # diagnostic tables - computes Proportions/Concentrations for each sample
source("R/diagPlots.R") # diagnostic plots - plots of avg concentrations over time
compos.conc <- dt %>% select(name,depth) %>% cbind(species.Concentrations) %>%
gather(.,key="Species",value="Concentration",-name,-depth) %>% spread(Species,Concentration) %>%
arrange(.,-depth) %>% filter(.,depth > 656.0 & depth < 698) # choose relevant section of core
compos.conc.raw.input.kt <- compos.conc %>% select(-name,-depth) %>% t(.) %>% data.frame() # extract only values
compos.combin <-combn(ncol(compos.conc.raw.input.kt),2) # create combinations of all columns (i.e depths)
colnames(compos.combin)<-lapply(combn(compos.conc$depth,2,simplify=FALSE),
function(x) paste(x,collapse="-")) # give combination matrix useful names ("depth-intervals")
deg.species.output <- alply(compos.combin,2,deg.rate.kt,df=compos.conc.raw.input.kt,.dims=TRUE) %>%  # compute kt for selection of samples
lapply(., function(x) cbind(x, ranking = rank(x))) %>%  # bind with  simple ranks
.[c(1:12)] # reduce to necessary ranges
deg.species.vals <- deg.species.output %>% {data.frame(lapply(., `[`, 1))}  # extract outcomes to df
deg.species.ranks <- deg.species.output %>% {data.frame(lapply(., `[`, 2))} # extract outcomes to df
colnames(deg.species.vals) <- names(deg.species.output); colnames(deg.species.ranks) <- names(deg.species.output) # transfer column names for clarity
# calculating for total bulk
bulk <-colSums(compos.conc.raw.input.kt)
deg.bulk.output<-alply(compos.combin,2,deg.rate.neg.kt,df=bulk,.dims=TRUE) %>% .[c(3:17)] # using NEG KT form!
deg.bulk.vals<- deg.bulk.output %>% {data.frame(lapply(., `[`, 1))} %>% t(.)  # extract to df
library(corrr)
var.groups <- species.Concentrations[4:15,]
corr.plot<-var.groups %>% correlate() %>% rearrange()
var.groups %>% correlate() %>% network_plot(min_cor = 0.85)
# aggregate based on correlation reln
common.species.agg <- species.Concentrations %>% select(Brsp:Other) %>% mutate(A=Snep+Squa+Brsp+Esp1+Egra+Eacu+Other,
B=Ipat+Iacu+Lmac+Sps1+Istr+Spac+Ocen+Nlab,
C=Pdal+Spme, D = Ivel+Spra+Isph) %>% select(-(Brsp:Other))
# aggregate manual custom ---> move to back
common.species.meta.agg <- species.Concentrations %>% select(Brsp:Other) %>%  mutate(A = Brsp+Esp1+Eacu+Egra+Snep+Other,
B = Sps1+Spac+Spra+Spme, C = Lmac+Ocen+Ivel+Spme+Pdal, D = Iacu+Ipat+Istr) %>%
select(-Brsp,-Esp1,-Eacu,-Egra,-Other,-Iacu,-Ipat,-Istr,-Lmac,-Ocen,-Pdal,-Ivel,-Sps1,-Spac,-Spra,-Spme) %>% select(A:D)  # combine species into 4 groups
# calculate pseudo time after Huguet et al., 2008
# time of oxygen is proportional to the inverse of the depth interval to the oxidation front (Buckley and Cranston, 1988)
y.dat <- dt %>% select(.,depth) %>% cbind(common.species.agg) # bind with depth data
dis.ox.front <- y.dat$depth[16]-y.dat$depth # compute distance from oxic front
y.dat<- y.dat %>% cbind(.,dis.ox.front) %>% mutate(.,pseudo.time = log10(dis.ox.front^2),all=A+B+C+D) %>%
mutate(.,pseudo.time.shf = pseudo.time+pseudo.time[15]*-1) # shift time to actual beginning of OF
#estimate oxidation exposure time for my HD data (Buckley and Cranston, 1988)
library(readxl)
geoB<-read_excel("data/GeoB20305-7_alldata.xlsx", sheet = 1) # load data for TOC from GV
geoB.time.dat <- geoB %>% .[9:28,c(2,3,4,9)] %>% .[-17,]%>% cbind(y.dat[c(1:11,13,15,17,19:23),],.) # low-res data merge with GV's data
# apply to my data
dTOC <- mean(geoB.time.dat$`Kohlenstoff  (TOC)`[c(14,15,16)])-geoB.time.dat$`Kohlenstoff  (TOC)`[4] # change in TOC from GV data
dZy <- (y.dat$depth[16]-y.dat$depth[4])^2 # distance squared from my HD data
K = 10 # assume a "K" (term balancing TOC and O2 diffussion)
exp.time.calc <-dTOC*dZy*K # total time passed
y.dat$oxidationTime <- round(exp.time.calc*(y.dat$pseudo.time/y.dat$pseudo.time[4]),-1) # compute time slices
y.dat$oxidationTimeShf <- round(exp.time.calc*(y.dat$pseudo.time.shf/y.dat$pseudo.time.shf[4]),-1) # compute shifted time slices
ggK <- cbind(y.dat,dt[,36:39]) %>% filter(depth < 696.5) %>% mutate(oxAdd = oxidationTime+1,oxAddShf=oxidationTimeShf+1,deg=rev(deg.bulk.vals)) # join estimates with CI data
plot(y.dat$dis.ox.front[5:15],y.dat$oxidationTimeShf[5:15])
# plot Main
ggplot(ggK, aes(oxAddShf,samConc)) + geom_ribbon(aes(ymin = samConc.LL, ymax = samConc.UL), fill = "grey70",alpha=0.25) +
geom_point(aes(size=sample_Size)) + geom_line() +
labs(title = "Dinocyst Concentration versus Estimated Oxidation Exposure Time", x = "Oxidation Exposure Time (yr.-1)",
y = "Dinocyst Concentration (cysts.g-1)", size = "Sample Size") +
theme_bw() + theme(panel.grid = element_line(linetype = 0))
ggKlin <-ggK[6:15,]
ggplot(ggKlin,aes(oxAddShf,deg)) + geom_point(aes(size=sample_Size)) + geom_line() +
labs(title = "Dinocyst Concentration versus Estimated Oxidation Exposure Time", x = "Oxidation Exposure Time (yr.-1)",
y = "Dinocyst Concentration (cysts.g-1)", size = "Sample Size") +
theme_bw() + theme(panel.grid = element_line(linetype = 0))
ggKexp<- ggK[2:15,]
m.exp <- nls(samConc ~ I(a*exp(b*oxAddShf)), data = ggKexp, start = list(a=10000,b=-0.003),trace=TRUE)
(RSS.p <- sum(residuals(m.exp)^2))
(TSS <- sum((ggKexp$samConc - mean(ggKexp$samConc))^2))  # Total sum of squares
ggK.mod.res<-as.character((round(1 - (RSS.p/TSS),3))) # R2
ggplot(ggKexp, aes(oxAddShf, samConc)) +geom_ribbon(aes(ymin = samConc.LL, ymax = samConc.UL),fill = "grey70",alpha=0.25) + geom_point() +
geom_smooth(method="nls",se=FALSE, method.args=list(formula=y~a*exp(b*x),start=list(a=10000,b=-0.003))) +
labs(title = "Dinocyst Concentration versus Estimated Oxidation Exposure Time", x = "Oxidation Exposure Time (yr.-1)",
y = "Dinocyst Concentration (cysts.g-1)", size = "Sample Size") +
theme_bw() + theme(panel.grid = element_line(linetype = 0)) + annotate("text", x = 5250, y = 14000, label = paste0("R2 = ",ggK.mod.res),size=3)
ggmultiK <- gather(ggK,key="property",value="specgroups",A,B,C,D) %>% mutate(property=factor(property, levels = unique(property)))
ggplot(ggmultiK,aes(oxidationTime,specgroups)) + geom_point(aes(colour=property)) + geom_line(aes(colour=property)) +
labs(title="Dinocyst Group Decay with Time", x = "Oxidation Exposure Time (yr.-1)", y ="Dinocyst Concentration (cysts.g-1)",
colour = "Species Groups") + theme_basic()
utility_writer(deg.species.output,"output/") # wrtie out data into appendices
save.image(file="output/allDataMAP.RData")
save(dt,file = "output/dtMAP.RData") #save as RData
save(dt,file = "MAT-Exercise/dtMAP.RData") #save for MAT analysis
setwd("~/Research/klim.dat/Demonstration/downloads/product")
library(dplyr)
library(tidyr)
where<-getwd()
files <- dir(pattern = '*.txt', full.names = TRUE)
pro.df <- files %>%  lapply(., read.table,sep=";",header=TRUE,fill=TRUE) %>%
lapply(., function(x) x[complete.cases(x),]) %>%  lapply(.,"[",1:6) %>% dplyr::bind_rows(.) %>%
.[complete.cases(.),] %>% setNames(c('station.id','date.start','date.end','quality','type','precip'))
date.str <- as.character(pro.df$date.start)
date.beg <-as.character(pro.df$date.start) %>% as.Date(., format='%Y%m%d')
diff_in_days = difftime(date.beg, date.beg[1], units = "days")
diff_in_years = as.double(diff_in_days)/365 # absolute years
abs.years<-floor(diff_in_years)
months_diff = as.double(substring(date.str, 5, 6)) - as.double(substring(date.str[1], 5, 6))
total_months = floor(diff_in_years)*12 + months_diff
frame <- mutate(pro.df,frameID = total_months) %>% .[-114369,] # trim to remove erroneous last obs
frame$station.id <- as.factor(frame$station.id)
frame$station.id <- as.numeric(frame$station.id)
frame$precip[frame$precip==-999] <- NA
frame$precip[frame$precip<=0] <- NA
setwd("~/Research/klim.dat")
stat.meta<-read.table("Demonstration/stat.csv",header=TRUE, sep =",")
stat.meta$station.id <-stat.meta$stat_id %>% as.numeric(.)
View(stat.meta)
library(data.table)
dat.var = as.data.table(frame)
dat.meta = as.data.table(stat.meta)
merged.df<-merge(dat.var,dat.meta, by="station.id")
merged.df$precip[is.na(merged.df$precip)] <- 0
library(akima)
df <- merged.df %>% filter(.,frameID==2000)
fld <- with(df, interp(x = lon, y = lat, z = precip))
filled.contour(x = fld$x,
y = fld$y,
z = fld$z,
color.palette =
colorRampPalette(c("white", "blue")),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall September 2010",
key.title = title(main = "Rain (mm)", cex.main = 1))
df.sta <- merged.df %>% filter(.,frameID==600)
sta<-with(df.sta, interp(x = lon, y = lat, z = precip))
filled.contour(x = sta$x,
y = sta$y,
z = sta$z,
color.palette =
colorRampPalette(c("white","blue")),zlim = c(0,100),
xlab = "Longitude",
ylab = "Latitude",
main = "Germany Rainfall January 1894",
key.title = title(main = "Rain (mm)", cex.main = 1))
sub.df <- merged.df %>% filter(.,frameID>=600)
sub.list <- split(sub.df,sub.df$frameID)
results <- list()
i=1
for (i in i:length(sub.list)){
results[[i]]<-with(sub.list[[i]], interp(x = lon, y = lat, z = precip,duplicate = "mean"))
}
i=1
for (i in i:length(results)){
png(filename=paste0(where,"/maps/",i,"out.png"))
filled.contour(x = results[[i]]$x,
y = results[[i]]$y,
z = results[[i]]$z,
color.palette =
colorRampPalette(c("white", "blue")),zlim=c(0,150),
xlab = "Longitude",
ylab = "Latitude",
key.title = title(main = "Rain (mm)", cex.main = 1))
dev.off()
}
where
setwd("~/Research/klim.dat")
where<-getwd()
i=1
for (i in i:length(results)){
png(filename=paste0(where,"/maps/",i,"out.png"))
filled.contour(x = results[[i]]$x,
y = results[[i]]$y,
z = results[[i]]$z,
color.palette =
colorRampPalette(c("white", "blue")),zlim=c(0,150),
xlab = "Longitude",
ylab = "Latitude",
key.title = title(main = "Rain (mm)", cex.main = 1))
dev.off()
}
